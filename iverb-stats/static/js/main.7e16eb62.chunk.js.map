{"version":3,"sources":["Hooks.js","components/AppBar.js","views/ViewContent.js","AppState.js","views/AboutView.js","views/DemoView.js","components/SimpleTitle.js","views/NotFoundView.js","utils/stableSort.js","components/RankingsTable.js","utils/tools.js","components/RecordsTable.js","components/RecordsChart.js","components/FloatingActionButton.js","Api.js","views/RecordsView.js","components/UniqueRecordsChart.js","views/RankingsView.js","components/LargestImprovement.js","components/LongestLasting.js","views/StatsView.js","components/RaceChart.js","views/RaceView.js","App.js","utils/serviceWorker.js","index.js"],"names":["useIsMounted","ref","React","useRef","useEffect","current","useStyles","makeStyles","theme","root","paddingBottom","spacing","list","width","menuButton","marginLeft","marginRight","drawer","flexShrink","appBar","zIndex","flex","active","color","palette","primary","main","pageLinks","title","link","inDrawer","default","withRouter","location","useState","open","setOpen","page","useMemo","find","x","pathname","startsWith","document","host","showDrawer","state","classes","className","List","ListItem","button","key","component","RouterLink","to","ListItemText","Divider","filter","map","item","index","undefined","position","Toolbar","Hidden","lgUp","IconButton","onClick","Typography","variant","Link","underline","implementation","SwipeableDrawer","onClose","onOpen","tabIndex","role","onKeyDown","mdDown","Drawer","ViewContent","children","Grid","container","xs","md","lg","initialState","darkMode","this","enabled","localStorage","getItem","setItem","toString","AppReducer","action","toggle","Error","createContext","aboutBox","padding","Padding","style","paddingTop","AboutView","useContext","AppState","dispatch","Paper","FormGroup","row","FormControlLabel","control","Switch","checked","onChange","label","rel","href","Alert","props","elevation","defaultReplay","info","DemoView","isMounted","useTheme","replay","setReplay","errorMessage","setErrorMessage","handleClose","_","reason","parseReplay","useCallback","file","reader","FileReader","onload","result","target","window","Buffer","SourceDemoParser","Speedrun","parser","speedrunTimer","SourceTimer","sarTimer","SarTimer","demo","parse","from","detectGame","adjustTicks","adjustRange","playbackTicks","ipt","getIntervalPerTick","playbackTime","speedrun","time","sar","removeData","obj","Object","keys","forEach","_view","err","message","readAsArrayBuffer","handleChange","ev","files","removeDragData","dataTransfer","items","clear","clearData","querySelector","addEventListener","removeEventListener","Button","disableElevation","click","type","id","display","onDrop","preventDefault","i","length","kind","push","getAsFile","onDragOver","name","fontSize","src","displayDataTypes","displayObjectSize","enableClipboard","Snackbar","autoHideDuration","severity","data","gutterBottom","NotFoundView","SimpleTitle","cmpOptions","numeric","stableSort","array","order","orderBy","desc","a","b","aa","getPropFast","localeCompare","cmp","el","sort","stableSortSort","thenBy","bb","path","indexOf","split","s","reduce","acc","val","rows","sortable","align","id2","RankingsTableHead","onRequestSort","showDuration","TableHead","TableRow","TableCell","sortDirection","Tooltip","placement","enterDelay","TableSortLabel","direction","prop1","prop2","event","overflowX","avatar","height","defaultState","rowsPerPage","noWrap","whiteSpace","minifiedStyle","MinTableCell","RecordsTable","setState","Table","size","newOrderBy","newThenBy","TableBody","slice","user","alignItems","Avatar","wrs","duration","formatScore","score","csec","tsec","Math","floor","sec","min","hourScale","scaleLinear","domain","range","getDateDifferenceColor","date","passedHours","moment","diff","RecordsTableHead","idx","colSpan","property","useRowStyles","borderBottom","RecordsHistoryRow","wr","useLiveDuration","delta","renderCell","isPartner","partnerId","isCurrentWr","beatenBy","rowSpan","fromNow","format","unit","media","RecordsRow","history","onClickHistory","isFirst","records","isLast","Collapse","in","timeout","unmountOnExit","Box","margin","aria-label","historyWr","stats","setHistory","totalTime","humanize","withTheme","labels","series","rest","isDarkTheme","options","legend","show","responsive","breakpoint","chart","plotOptions","pie","donut","value","total","fab","top","right","bottom","left","jumpToTop","smoothScroll","y","documentElement","scrollTop","requestAnimationFrame","scrollTo","FloatingActionButton","onScroll","clearTimeout","setTimeout","scrollX","scrollY","useScroll","Zoom","Fab","baseApi","route","fetch","res","console","log","url","status","ok","statusText","json","padTop","match","game","setGame","tab","setTab","params","live","Api","request","then","campaigns","snapshotDate","snapshot","isValid","campaign","maps","currentWr","t","users","r","concat","frequency","count","leaderboard","u","wrDate","bestTimeId","alias","entry","catch","error","handleTab","newValue","LinearProgress","Tabs","indicatorColor","textColor","scrollButtons","Tab","p","justify","alignContent","RankingsTable","xaxis","categories","dataLabels","toolbar","foreColor","tooltip","bar","horizontal","formControl","minWidth","setType","onChangeType","FormControl","InputLabel","Select","MenuItem","LargestImprovementHead","LongestLastingHead","StatsComponent","LongestLasting","LargestImprovement","RaceChart","update","timeline","start","clearInterval","intervalId","prevState","sortAxis","currRank","maxVal","prevRank","descending","minValue","byValue","sorted","maxItems","max","apply","prev","cur","BarChart","colors","len","race","setRace","run","setRun","players","Array","fill","add","textAlign","paddingRight","random","justifyContent","delay","timelineStyle","marginBottom","textBoxStyle","barStyle","marginTop","borderRadius","views","App","useReducer","createMuiTheme","light","blue","dark","secondary","orange","red","A400","context","ThemeProvider","CssBaseline","Provider","basename","exact","RecordsView","RankingsView","StatsView","RaceView","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6ZAEaA,EAAe,WACxB,IAAMC,EAAMC,IAAMC,QAAO,GAKzB,OAJAD,IAAME,WAAU,WAEZ,OADAH,EAAII,SAAU,EACP,kBAAOJ,EAAII,SAAU,KAC7B,IACIJ,GCULK,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,cAAeF,EAAMG,QAAQ,IAEjCC,KAAM,CACFC,MAAOL,EAAMG,QAAQ,KAEzBG,WAAY,CACRC,YAAa,GACbC,YAAa,IAEjBC,OAAQ,CACJJ,MAAO,IACPK,WAAY,GAEhBC,OAAQ,CACJC,OAAQZ,EAAMY,OAAOH,OAAS,GAElCI,KAAM,CACFA,KAAM,GAEVC,OAAQ,CACJC,MAAOf,EAAMgB,QAAQC,QAAQC,UAI/BC,EAAY,CACd,CAAEC,MAAO,uBAAwBC,KAAM,KAAMC,UAAU,GACvD,CAAEF,MAAO,cAAeC,KAAM,IAAKC,UAAU,GAC7C,CAAEF,MAAO,UAAWC,KAAM,WAAYC,UAAU,EAAMC,SAAS,GAC/D,CAAEH,MAAO,WAAYC,KAAM,SAAUC,UAAU,EAAMC,SAAS,GAC9D,CAAEH,MAAO,aAAcC,KAAM,SAAUC,UAAU,EAAMC,SAAS,GAChE,CAAEH,MAAO,OAAQC,KAAM,QAASC,UAAU,EAAMC,SAAS,GACzD,CAAEH,MAAO,kBAAmBC,KAAM,QAASC,UAAU,GACrD,CAAEF,MAAO,QAASC,KAAM,SAAUC,UAAU,IA2FjCE,eAxFA,SAAC,GAAkB,IDvCTJ,ECuCPK,EAAe,EAAfA,SAAe,EACL/B,IAAMgC,UAAS,GADV,mBACtBC,EADsB,KAChBC,EADgB,KAGvBC,EAAOnC,IAAMoC,SACf,kBACIX,EAAUY,MACN,SAACC,GAAD,OAAOA,EAAEX,OAASI,EAASQ,UAAwB,OAAXD,EAAEX,MAAiBI,EAASQ,SAASC,WAAWF,EAAEX,KAAO,SAChGF,EAAU,KACnB,CAACM,ID/CgBL,ECkDZS,EAAKT,MDjDd1B,IAAME,WAAU,WACZuC,SAASf,MAAQA,EAAQ,MAAQe,SAASV,SAASW,OACpD,CAAChB,ICiDJ,IAAMiB,EAAa,SAACC,GAAD,OAAW,WAC1BV,EAAQU,KAGNC,EAAUzC,IAEVM,EACF,yBAAKoC,UAAWD,EAAQnC,MACpB,kBAACqC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,EAAGC,UAAWC,IAAYC,GAAI,KAChD,kBAACC,EAAA,EAAD,CAAc/B,QAAQ,kBAG9B,kBAACgC,EAAA,EAAD,MACA,kBAACR,EAAA,EAAD,KACKtB,EACI+B,QAAO,SAAClB,GAAD,OAAOA,EAAEV,YAChB6B,KAAI,SAACC,EAAMC,GAAP,OACD,kBAACX,EAAA,EAAD,CACIC,QAAM,EACNC,IAAKS,EACLR,UAAWC,IACXC,GAAIK,EAAK/B,KACTmB,UAAWY,EAAKhC,QAAUS,EAAKT,MAAQmB,EAAQzB,YAASwC,GAExD,kBAACN,EAAA,EAAD,CAAc/B,QAASmC,EAAKhC,YAGxC,kBAAC6B,EAAA,EAAD,MACA,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,EAAGC,UAAWC,IAAYC,GAAI,SAChD,kBAACC,EAAA,EAAD,CAAc/B,QAAS,qBAE3B,kBAACyB,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,EAAGC,UAAWC,IAAYC,GAAI,UAChD,kBAACC,EAAA,EAAD,CAAc/B,QAAS,cAO3C,OACI,yBAAKuB,UAAWD,EAAQtC,MACpB,kBAAC,IAAD,CAAgBuC,UAAWD,EAAQ5B,OAAQ4C,SAAS,SAChD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYnB,UAAWD,EAAQjC,WAAYsD,QAASvB,GAAW,GAAOtB,MAAM,WACxE,kBAAC,IAAD,QAGR,kBAAC8C,EAAA,EAAD,CAAYC,QAAQ,KAAK/C,MAAM,WAC3B,kBAACgD,EAAA,EAAD,CAAMlB,UAAWC,IAAYC,GAAG,IAAIhC,MAAM,UAAUiD,UAAU,QAA9D,kBAMZ,kBAACP,EAAA,EAAD,CAAQC,MAAI,EAACO,eAAe,OACxB,kBAACC,EAAA,EAAD,CAAiBvC,KAAMA,EAAMwC,QAAS9B,GAAW,GAAQ+B,OAAQ/B,GAAW,GAAOyB,QAAQ,aACvF,yBAAKO,SAAU,EAAGC,KAAK,SAASV,QAASvB,GAAW,GAAQkC,UAAWlC,GAAW,IAC7EjC,KAIb,kBAACqD,EAAA,EAAD,CAAQe,QAAM,EAACP,eAAe,OAC1B,kBAACQ,EAAA,EAAD,CAAQX,QAAQ,aACZ,yBAAKO,SAAU,EAAGC,KAAK,UAClBlE,S,6CC3HVsE,EATK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,IAAI,EAAOC,GAAI,EAAGC,GAAI,IACjC,kBAACJ,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC1BL,K,wBCMPM,EAAe,CACjBC,SAAU,I,WAXV,aAAe,oBACXC,KAAKC,QAAgD,SAAtCC,aAAaC,QAAQ,a,qDAKpC,OAFAH,KAAKC,SAAWD,KAAKC,QACrBC,aAAaE,QAAQ,YAAaJ,KAAKC,QAAQI,YACxCL,S,OAQFM,EAAa,CACtB,SAACnD,EAAD,GACI,OADmB,EAAboD,QAEF,IAAK,iBACD,OAAO,2BACApD,GADP,IAEI4C,SAAU5C,EAAM4C,SAASS,WAEjC,QACI,MAAM,IAAIC,MAAM,0BAG5BX,GAGWvF,MAAMmG,cAAcZ,GCZ7BnF,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrC8F,SAAU,CACNC,QAAS/F,EAAMG,QAAQ,QAYzB6F,EAAU,kBAAM,yBAAKC,MAAO,CAAEC,WAAY,WA+LjCC,EA1KG,WAAM,MAMhBzG,IAAM0G,WAAWC,GAFRnB,EAJO,EAIhB5C,MAAS4C,SACToB,EALgB,EAKhBA,SA8CE/D,EAAUzC,IAEhB,OACI,kBAAC,EAAD,KACI,kBAACyG,EAAA,EAAD,CAAO/D,UAAWD,EAAQuD,UACtB,kBAACjC,EAAA,EAAD,CAAYhB,UAAU,KAAKiB,QAAQ,MAAnC,uCAGA,6BACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAApB,mBAmFA,kBAAC,EAAD,MAEA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBACA,6BACA,kBAAC0C,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAQC,QAAS3B,EAASE,QAAS0B,SAlIzC,WACnBR,EAAS,CAAEZ,OAAQ,oBAiImE3E,MAAM,YAC5EgG,MAAM,eAId,kBAAC,EAAD,MAEA,kBAAClD,EAAA,EAAD,CAAYC,QAAQ,MAApB,WACA,6BACA,kBAACC,EAAA,EAAD,CAAMiD,IAAI,WAAWC,KAAK,0BAA1B,kBAGA,6BACA,kBAAClD,EAAA,EAAD,CAAMiD,IAAI,WAAWC,KAAK,oCAA1B,a,wDC7MVC,GAAQ,SAACC,GACX,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGtD,QAAQ,UAAaqD,KAGlDE,GAAgB,CAClBC,KAAM,4BAgKKC,GA7JE,WACb,IAAMC,EAAYhI,IACZQ,EAAQyH,eAFK,EAIS/H,IAAMgC,SAAS2F,IAJxB,mBAIZK,EAJY,KAIJC,EAJI,OAMqBjI,IAAMgC,UAAS,GANpC,mBAMZkG,EANY,KAMEC,EANF,KAQbC,EAAc,SAACC,EAAGC,GACL,cAAXA,GAIJH,GAAgB,IAOdI,EAAcvI,IAAMwI,aACtB,SAACC,GACG,GAAKA,EAAL,CAEA,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,YAA6B,IAAhBC,EAAe,EAAzBC,OAAUD,OACzB,IACI,IAAKf,EAAU3H,QAAS,OACxB8H,EAAUN,IACVQ,GAAgB,GAHhB,MAK+CY,OAAvCC,EALR,EAKQA,OAAQC,EALhB,EAKgBA,iBAAkBC,EALlC,EAKkCA,SAE5BC,EAASF,EAAiBpH,UAC1BuH,EAAgBF,EAASG,YAAYxH,UACrCyH,EAAWJ,EAASK,SAAS1H,UAE7B2H,EAAQT,OAAOS,KAAOL,EAAOM,MAAMT,EAAOU,KAAKb,IASrD,GANAW,EAAKG,aAAaC,cAGlBJ,EAAKK,cAGsB,IAAvBL,EAAKM,cAAqB,CAC1B,IAAIC,EAAMP,EAAKQ,qBACfR,EAAKM,cAAgB,EACrBN,EAAKS,aAAeF,OAGpBP,EAAKU,SAAWd,EAAce,KAAKX,GAGnCA,EAAKY,IAAMd,EAASa,KAAKX,GAG7B,IAAK1B,EAAU3H,QAAS,QAEL,SAAbkK,EAAcC,GAChBC,OAAOC,KAAKF,GAAKG,SAAQ,SAACvH,GACV,UAARA,SACOoH,EAAII,MACgB,kBAAbJ,EAAIpH,IAClBmH,EAAWC,EAAIpH,OAK3BmH,CAAWb,GACXvB,EAAUuB,GACZ,MAAOmB,GACD7C,EAAU3H,SACVgI,EAAgBwC,EAAIC,WAIhClC,EAAOmC,kBAAkBpC,MAE7B,CAACX,EAA6BG,EAAWE,IAGvC2C,EAAe9K,IAAMwI,aAAY,SAACuC,GAAD,OAAQxC,EAAYwC,EAAGjC,OAAOkC,MAAM,MAAK,CAACzC,IAuB3E0C,EAAiB,SAACF,GAChBA,EAAGG,aAAaC,MAChBJ,EAAGG,aAAaC,MAAMC,QAEtBL,EAAGG,aAAaG,aAIxBrL,IAAME,WAAU,WAEZ,OADAuC,SAAS6I,cAAc,SAASC,iBAAiB,SAAUT,GACpD,kBAAMrI,SAAS6I,cAAc,SAASE,oBAAoB,SAAUV,MAC5E,CAACA,IAMJ,OACI,kBAAC,EAAD,KACI,kBAACjE,EAAA,EAAD,CAAON,MAAO,CAAEF,QAAS,wBACrB,kBAACoF,EAAA,EAAD,CAAQrH,QAAQ,YAAY/C,MAAM,UAAUqK,kBAAgB,EAACxH,QAPxD,WACbzB,SAAS6I,cAAc,SAASK,UAMxB,aAGA,2BAAOC,KAAK,OAAOC,GAAG,OAAOtF,MAAO,CAAEuF,QAAS,UAM/C,yBAAKvF,MAAO,CAAE/F,cAAe,UAC7B,yBAAKuL,OAnDG,SAAChB,GACjBA,EAAGiB,iBAEH,IAAMhB,EAAQ,GAEd,GAAID,EAAGG,aAAaC,MAChB,IAAK,IAAIc,EAAI,EAAGA,EAAIlB,EAAGG,aAAaC,MAAMe,SAAUD,EACV,SAAlClB,EAAGG,aAAaC,MAAMc,GAAGE,MACzBnB,EAAMoB,KAAKrB,EAAGG,aAAaC,MAAMc,GAAGI,aAKhD9D,EAAYyC,EAAM,IAClBC,EAAeF,IAqCmBuB,WAlCd,SAACvB,GACrBA,EAAGiB,mBAkCS,kBAAC,IAAD,CACIO,KAAK,OACLhG,MAAO,CAAEiG,SAAU,QACnBC,IAAKzE,EACL1H,MAA8B,UAAvBA,EAAMgB,QAAQsK,KAAmB,kBAAoB,YAC5Dc,kBAAkB,EAClBC,mBAAmB,EACnBC,iBAAiB,KAGzB,kBAACC,GAAA,EAAD,CAAU5K,MAAuB,IAAjBiG,EAAwB4E,iBAAkB,IAAMrI,QAAS2D,GACrE,kBAAC,GAAD,CAAO3D,QAAS2D,EAAa2E,SAAS,SACjC7E,OCtKV,mBAAG8E,EAAH,EAAGA,KAAMvF,EAAT,EAASA,MAAT,OACX,kBAACtD,EAAA,EAAD,eAAYC,QAAQ,KAAK6I,cAAY,EAAC1G,MAAO,CAAEF,QAAS,uBAA4BoB,GAC/EuF,ICUME,GAVM,WACjB,OACI,kBAAC,EAAD,KACI,kBAACrG,EAAA,EAAD,KACI,kBAACsG,GAAD,CAAaH,KAAK,yB,8JCT5BI,GAAa,CAAEC,SAAS,GAEjBC,GAAa,SAACC,EAAOC,EAAOC,GACrC,IAAIC,EAAO,SAACC,EAAGC,GACX,IAAIC,EAAKC,GAAYH,EAAGF,GAAS3H,WAEjC,OADSgI,GAAYF,EAAGH,GAAS3H,WACvBiI,cAAcF,OAAIjK,EAAWwJ,KAGvCY,EAAgB,SAAVR,EAAmB,SAACG,EAAGC,GAAJ,OAAUF,EAAKC,EAAGC,IAAK,SAACD,EAAGC,GAAJ,OAAWF,EAAKC,EAAGC,IAQvE,OAAOL,EACF9J,KAAI,SAACwK,EAAItK,GAAL,MAAe,CAACsK,EAAItK,MACxBuK,MARM,SAACP,EAAGC,GACX,IAAIJ,EAAQQ,EAAIL,EAAE,GAAIC,EAAE,IACxB,OAAc,IAAVJ,EAAoBA,EACjBG,EAAE,GAAKC,EAAE,MAMfnK,KAAI,SAACwK,GAAD,OAAQA,EAAG,OAEXE,GAAiB,SAACZ,EAAOC,EAAOC,EAASW,GAClD,GAAIX,IAAYW,EACZ,OAAOd,GAAWC,EAAOC,EAAOC,GAGpC,IAAIC,EAAO,SAACC,EAAGC,GACX,IAAIC,EAAKC,GAAYH,EAAGF,GAAS3H,WAC7BuI,EAAKP,GAAYF,EAAGH,GAAS3H,WAC7BkI,EAAMK,EAAGN,cAAcF,OAAIjK,EAAWwJ,IAC1C,OAAY,IAARY,EAAkBA,GACtBH,EAAKC,GAAYH,EAAGS,GAAQtI,YAC5BuI,EAAKP,GAAYF,EAAGQ,GAAQtI,YAClBiI,cAAcF,OAAIjK,EAAWwJ,MAGvCY,EAAgB,SAAVR,EAAmB,SAACG,EAAGC,GAAJ,OAAUF,EAAKC,EAAGC,IAAK,SAACD,EAAGC,GAAJ,OAAWF,EAAKC,EAAGC,IAQvE,OAAOL,EACF9J,KAAI,SAACwK,EAAItK,GAAL,MAAe,CAACsK,EAAItK,MACxBuK,MARM,SAACP,EAAGC,GACX,IAAIJ,EAAQQ,EAAIL,EAAE,GAAIC,EAAE,IACxB,OAAc,IAAVJ,EAAoBA,EACjBG,EAAE,GAAKC,EAAE,MAMfnK,KAAI,SAACwK,GAAD,OAAQA,EAAG,OAIlBH,GAAc,SAACxD,EAAKgE,GAAN,OACO,IAAvBA,EAAKC,QAAQ,KACPD,EACKE,MAAM,KACNhL,QAAO,SAACiL,GAAD,OAAOA,KACdC,QAAO,SAACC,EAAKC,GAAN,OAAcD,GAAOA,EAAIC,KAAMtE,GAC3CA,EAAIgE,IC5CRO,GAAO,CACT,CAAEhD,GAAI,YAAaiD,UAAU,EAAOzH,MAAO,SAAU0H,MAAO,QAC5D,CAAElD,GAAI,MAAOmD,IAAK,WAAYF,UAAU,EAAMzH,MAAO,gBAAiB0H,MAAO,QAC7E,CAAElD,GAAI,WAAYmD,IAAK,MAAOF,UAAU,EAAMzH,MAAO,iBAAkB0H,MAAO,SAG5EE,GAAoB,SAAC,GAAqD,IAAnDzB,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,QAASyB,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAKxD,OACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACKR,GACIrL,QAAO,kBAAmB,aAAnB,EAAGqI,IAA8BsD,KACxC1L,KAAI,SAACsD,GAAD,OACD,kBAACuI,GAAA,EAAD,CACIpM,IAAK6D,EAAI8E,GACTkD,MAAOhI,EAAIgI,MACX1I,QAAQ,UACRkJ,cAAe9B,IAAY1G,EAAI8E,IAAK2B,IAElB,IAAjBzG,EAAI+H,UACD,kBAACU,GAAA,EAAD,CAAS9N,MAAO,WAAaqF,EAAIM,MAAOoI,UAAU,eAAeC,WAAY,KACzE,kBAACC,GAAA,EAAD,CACIvO,OAAQqM,IAAY1G,EAAI8E,GACxB+D,UAAWpC,EACXtJ,SArBT2L,EAqBoC9I,EAAI8E,GArBjCiE,EAqBqC/I,EAAIiI,IArB/B,SAACe,GACzCb,EAAca,EAAOF,EAAOC,MAsBK/I,EAAIM,SAIC,IAAjBN,EAAI+H,UAAsB/H,EAAIM,OA3B7B,IAACwI,EAAOC,QAmChC1P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFyP,UAAW,QAEfC,OAAQ,CACJtP,MAAOL,EAAMG,QAAQ,GACrByP,OAAQ5P,EAAMG,QAAQ,GACtBK,YAAa,QAIfqP,GAAe,CACjB3C,MAAO,OACPC,QAAS,MACTW,OAAQ,WACRjM,KAAM,EACNiO,YAAa,IAGXC,GAAS,CAAEC,WAAY,UACvBC,GAAgB,CAAElK,QAAS,oBAC3BmK,GAAe,SAAC/I,GAAD,OAAW,kBAAC6H,GAAA,EAAD,eAAW/I,MAAOgK,IAAmB9I,KA6DtDgJ,GA3DM,SAAC,GAA4B,IAA1BzD,EAAyB,EAAzBA,KAAMmC,EAAmB,EAAnBA,aAAmB,EACqBnP,IAAMgC,SAAN,eAAoBmO,KADzC,0BACpC3C,EADoC,EACpCA,MAAOC,EAD6B,EAC7BA,QAASW,EADoB,EACpBA,OAAQgC,EADY,EACZA,YAAajO,EADD,EACCA,KAAQuO,EADT,KAevC7N,EAAUzC,KAEhB,OACI,yBAAK0C,UAAWD,EAAQtC,MACpB,kBAACoQ,GAAA,EAAD,CAAOC,KAAK,SACR,kBAAC,GAAD,CACIpD,MAAOA,EACPC,QAASA,EACTyB,cApBU,SAAC7G,EAAGwH,EAAOC,GACjC,IAAMe,EAAahB,EACbiB,EAAYhB,EAElBY,GAAS,SAAC9N,GAAD,mBAAC,eACHA,GADE,IAEL4K,MAAO5K,EAAM6K,UAAYoD,GAA8B,SAAhBjO,EAAM4K,MAAmB,MAAQ,OACxEC,QAASoD,EACTzC,OAAQ0C,QAaA3B,aAAcA,IAElB,kBAAC4B,GAAA,EAAD,MACM5B,EAAehB,GAAiBb,IAAYN,EAAMQ,EAAOC,EAASW,GAC/D4C,MAAM7O,EAAOiO,EAAajO,EAAOiO,EAAcA,GAC/C3M,KAAI,SAACsD,GAAD,OACD,kBAACsI,GAAA,EAAD,CAAU1K,UAAW,EAAGzB,IAAK6D,EAAIkK,KAAKpF,IAClC,kBAAC,GAAD,CAAckD,MAAM,QAChB,kBAAC7J,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAMsB,WAAW,UACvC,kBAACC,GAAA,EAAD,CAAQrO,UAAWD,EAAQoN,OAAQxD,IAAK1F,EAAIkK,KAAKhB,SACjD,kBAAC5L,EAAA,EAAD,CACIkC,MAAO8J,GACPhP,MAAM,UACNkG,KAAM,kCAAoCR,EAAIkK,KAAKpF,GACnDvE,IAAI,aACJwB,OAAO,UAEN/B,EAAIkK,KAAK1E,QAItB,kBAAC,GAAD,CAAcwC,MAAM,QAAQhI,EAAIqK,KAC/BjC,GACG,kBAAC,GAAD,CAAcJ,MAAM,QACfhI,EAAIsK,SADT,OACwC,IAAjBtK,EAAIsK,SAAiB,GAAK,a,uGC5H9E,SAASC,GAAYC,GACxB,QAAc3N,IAAV2N,GAAiC,OAAVA,EACvB,OAAOA,EAGX,IAAIC,EAAOD,EAAQ,IACfE,EAAOC,KAAKC,MAAMJ,EAAQ,KAC1BK,EAAMH,EAAO,GACbI,EAAMH,KAAKC,MAAMF,EAAO,IAE5B,OAAQI,EAAM,EAAIA,EAAM,IAAM,KAAOD,EAAM,IAAMC,EAAM,EAAI,IAAMD,EAAMA,GAAO,KAAOJ,EAAO,GAAK,IAAMA,EAAOA,GAIlH,IAAMM,GAAYC,eACbC,OAAO,CAAC,EAAG,GAAI,IAAS,OACxBC,MAAM,CAAC,UAAW,UAAW,UAAW,YAEtC,SAASC,GAAuBC,GACnC,IAAMC,EAAcC,OAASC,KAAKD,KAAOF,GAAO,SAChD,OAAOC,GAAe,KAAcN,GAAUM,QAAexO,EAG7CmO,eACfC,OAAO,CAAC,EAAG,IAAQ,IAAS,OAC5BC,MAAM,CAAC,UAAW,UAAW,UAAW,YCJ7C,IAAMpD,GAAO,CACT,CAAEhD,GAAI,WAAYiD,UAAU,EAAMzH,MAAO,UAAW0H,MAAO,QAC3D,CAAElD,GAAI,QAASiD,UAAU,EAAMzH,MAAO,SAAU0H,MAAO,QACvD,CAAElD,GAAI,YAAaiD,UAAU,EAAMzH,MAAO,SAAU0H,MAAO,QAC3D,CAAElD,GAAI,OAAQiD,UAAU,EAAMzH,MAAO,OAAQ0H,MAAO,QACpD,CAAElD,GAAI,WAAYiD,UAAU,EAAMzH,MAAO,WAAY0H,MAAO,QAC5D,CAAElD,GAAI,KAAMiD,UAAU,EAAOzH,MAAO,GAAI0H,MAAO,SAG7CwD,GAAmB,SAAC,GAAuC,IAArC/E,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAASyB,EAAoB,EAApBA,cAKxC,OACI,kBAACE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACKR,GAAKpL,KAAI,SAACsD,EAAKyL,GAAN,OACN,kBAAClD,GAAA,EAAD,CACIpM,IAAKsP,EACLzD,MAAOhI,EAAIgI,MACX1I,QAAQ,UACRkJ,cAAe9B,IAAY1G,EAAI8E,IAAK2B,EACpCiF,QAASD,IAAQ3D,GAAK3C,OAAS,EAAI,EAAI,IAErB,IAAjBnF,EAAI+H,UACD,kBAACU,GAAA,EAAD,CAAS9N,MAAO,WAAaqF,EAAIM,MAAOoI,UAAU,eAAeC,WAAY,KACzE,kBAACC,GAAA,EAAD,CACIvO,OAAQqM,IAAY1G,EAAI8E,GACxB+D,UAAWpC,EACXtJ,SApBLwO,EAoBgC3L,EAAI8E,GApBvB,SAACkE,GACrCb,EAAca,EAAO2C,MAqBQ3L,EAAIM,SAIC,IAAjBN,EAAI+H,UAAsB/H,EAAIM,OA1BzB,IAACqL,QAkCzBtS,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFyP,UAAW,YAIbG,GAAe,CACjB3C,MAAO,MACPC,QAAS,YACTtL,KAAM,EACNiO,YAAa,KAGXC,GAAS,CAAEC,WAAY,UACvBC,GAAgB,CAAElK,QAAS,oBAC3BmK,GAAe,SAAC/I,GAAD,OAAW,kBAAC6H,GAAA,EAAD,eAAW/I,MAAOgK,IAAmB9I,KAE/DkL,GAAetS,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACF,QAAS,CACLqS,aAAc,UAGtB3C,OAAQ,CACJtP,MAAOL,EAAMG,QAAQ,GACrByP,OAAQ5P,EAAMG,QAAQ,GACtBK,YAAa,QAIf+R,GAAoB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,gBACvBxB,EAAQD,GAAYwB,EAAGvB,OACvByB,EAAqB,OAAbF,EAAGE,MAAiB1B,GAAYwB,EAAGE,OAAS,KAEpDC,GAA8B,IAAjBH,EAAGI,YAAwBJ,EAAGK,UAC3CC,EAAiC,OAAnBN,EAAGO,SAASxH,GAEhC,OACI,kBAACwD,GAAA,EAAD,CAAU1K,UAAW,GAChBsO,GACG,kBAAC,GAAD,CAAclE,MAAM,OAAOuE,SAA0B,IAAjBR,EAAGI,UAAqB,EAAI,GAC5D,kBAAC1D,GAAA,EAAD,CAAS9N,MAAO,kBAAC,KAAD,CAAQ6R,SAAO,GAAET,EAAGX,MAAgB1C,UAAU,aAAaC,WAAY,KACnF,kBAAC,KAAD,CAAQnJ,MAAK,aAAIlF,MAAO6Q,GAAuBY,EAAGX,OAAU9B,IAAUmD,OAAO,cACxEV,EAAGX,QAKnBc,GACG,kBAAC,GAAD,CAAclE,MAAM,OAAOuE,SAA0B,IAAjBR,EAAGI,UAAqB,EAAI,GAC3D3B,GAGT,kBAAC,GAAD,CAAcxC,MAAM,QAChB,kBAAC1K,EAAA,EAAD,CACIhD,MAAM,UACNkG,KAAI,yCAAoCuL,EAAG7B,KAAKpF,IAChDvE,IAAI,aACJwB,OAAO,UAENgK,EAAG7B,KAAK1E,OAGhB0G,GACG,kBAAC,GAAD,CAAclE,MAAM,OAAOuE,SAA0B,IAAjBR,EAAGI,UAAqB,EAAI,GAC3DF,EAAQ,IAAMA,EAAQ,IAG9BC,GACG,kBAAC,GAAD,CAAclE,MAAM,OAAOuE,SAA0B,IAAjBR,EAAGI,UAAqB,EAAI,GAC5D,kBAAC1D,GAAA,EAAD,CAAS9N,MAAM,UAAU+N,UAAU,aAAaC,WAAY,KACvDqD,GAAmBK,EAChB,kBAAC,KAAD,CAAQ7M,MAAO8J,GAAQiC,KAAMQ,EAAGX,KAAMsB,KAAK,SAE3C,8BAAOX,EAAGzB,YAK1B,kBAAC,GAAD,CAActC,MAAM,OAAOxI,MAAO8J,IAC7ByC,EAAGtJ,MACA,kBAACgG,GAAA,EAAD,CAAS9N,MAAM,gBAAgB+N,UAAU,SAASC,WAAY,KAC1D,kBAACzL,EAAA,EAAD,CACI2M,KAAK,QACLrK,MAAO8J,GACPhP,MAAM,UACNkG,KAAM,qCAAuCuL,EAAGjH,GAChDvE,IAAI,aACJwB,OAAO,UAEP,kBAAC,KAAD,CAAa0D,SAAS,cAIjCsG,EAAGY,OACA,kBAAClE,GAAA,EAAD,CAAS9N,MAAM,mBAAmB+N,UAAU,SAASC,WAAY,KAC7D,kBAACzL,EAAA,EAAD,CACI2M,KAAK,QACLrK,MAAK,2BAAO8J,IAAP,IAAexP,WAAaiS,EAAGtJ,UAAY5F,EAAL,KAC3CvC,MAAM,UACNkG,KAAM,oBAAsBuL,EAAGY,MAC/BpM,IAAI,aACJwB,OAAO,UAEP,kBAAC,KAAD,CAAa0D,SAAS,iBAS5CmH,GAAa,SAAC,GAA+D,IAA7Db,EAA4D,EAA5DA,GAAIrF,EAAwD,EAAxDA,QAASsF,EAA+C,EAA/CA,gBAAiBa,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eACnDtC,EAAQD,GAAYwB,EAAGvB,OACvByB,EAAqB,OAAbF,EAAGE,MAAiB1B,GAAYwB,EAAGE,OAAS,KAEpDnQ,EAAU8P,KAEV1Q,EAAO2R,IAAYd,EAAGrP,IAAIoI,GAEhC,OACI,oCACI,kBAACwD,GAAA,EAAD,CAAU1K,UAAW,IACfmO,EAAGrP,IAAIqQ,SAAwB,aAAZrG,GAAsC,cAAZA,IAC3C,kBAAC,GAAD,CACIlH,MAAO8J,GACPiD,QAAqB,aAAZ7F,GAAsC,cAAZA,EAA0BqF,EAAGrP,IAAIsQ,QAAU,EAC9EhF,MAAM,QAEN,kBAAC1K,EAAA,EAAD,CACIhD,MAAM,UACNkG,KAAI,yCAAoCuL,EAAGrP,IAAIoI,IAC/CvE,IAAI,aACJwB,OAAO,UAENgK,EAAGrP,IAAI8I,QAIlBuG,EAAGrP,IAAIqQ,SAAwB,aAAZrG,GAAsC,cAAZA,IAC3C,kBAAC,GAAD,CACI6F,QAAqB,aAAZ7F,GAAsC,cAAZA,EAA0BqF,EAAGrP,IAAIsQ,QAAU,EAC9EhF,MAAM,QAELiE,GACG,kBAACxD,GAAA,EAAD,CAAS9N,MAAO,kCAAQsR,EAAR,qBAAwCvD,UAAU,SAASC,WAAY,KACnF,8BAAO6B,KAGbyB,GAAS,8BAAOzB,IAG1B,kBAAC,GAAD,CAAcxC,MAAM,QAChB,kBAAC7J,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAMsB,WAAW,UACvC,kBAACC,GAAA,EAAD,CAAQrO,UAAWD,EAAQoN,OAAQxD,IAAKqG,EAAG7B,KAAKhB,SAChD,kBAAC5L,EAAA,EAAD,CACIhD,MAAM,UACNkG,KAAI,yCAAoCuL,EAAG7B,KAAKpF,IAChDvE,IAAI,aACJwB,OAAO,UAENgK,EAAG7B,KAAK1E,QAIrB,kBAAC,GAAD,CAAcwC,MAAM,QAChB,kBAACS,GAAA,EAAD,CAAS9N,MAAO,kBAAC,KAAD,CAAQ6R,SAAO,GAAET,EAAGX,MAAgB1C,UAAU,aAAaC,WAAY,KACnF,kBAAC,KAAD,CAAQnJ,MAAK,aAAIlF,MAAO6Q,GAAuBY,EAAGX,OAAU9B,IAAUmD,OAAO,cACxEV,EAAGX,QAIhB,kBAAC,GAAD,CAAcpD,MAAM,QAChB,kBAACS,GAAA,EAAD,CAAS9N,MAAM,UAAU+N,UAAU,aAAaC,WAAY,KACvDqD,EACG,kBAAC,KAAD,CAAQxM,MAAO8J,GAAQiC,KAAMQ,EAAGX,KAAMsB,KAAK,SAE3C,8BAAOX,EAAGzB,YAItB,kBAAC,GAAD,CAActC,MAAM,OAAOxI,MAAO8J,IAC7ByC,EAAGtJ,MACA,kBAACgG,GAAA,EAAD,CAAS9N,MAAM,gBAAgB+N,UAAU,SAASC,WAAY,KAC1D,kBAACzL,EAAA,EAAD,CACI2M,KAAK,QACLrK,MAAO8J,GACPhP,MAAM,UACNkG,KAAM,qCAAuCuL,EAAGjH,GAChDvE,IAAI,aACJwB,OAAO,UAEP,kBAAC,KAAD,CAAa0D,SAAS,cAIjCsG,EAAGY,OACA,kBAAClE,GAAA,EAAD,CAAS9N,MAAM,mBAAmB+N,UAAU,SAASC,WAAY,KAC7D,kBAACzL,EAAA,EAAD,CACI2M,KAAK,QACLrK,MAAK,2BAAO8J,IAAP,IAAexP,WAAaiS,EAAGtJ,UAAY5F,EAAL,KAC3CvC,MAAM,UACNkG,KAAM,oBAAsBuL,EAAGY,MAC/BpM,IAAI,aACJwB,OAAO,UAEP,kBAAC,KAAD,CAAa0D,SAAS,cAIjCsG,EAAGrP,IAAIuQ,QAAUlB,EAAGrP,IAAImQ,SACrB,kBAAC3P,EAAA,EAAD,CACI5C,MAAM,UACNuP,KAAK,QACLrK,MAAK,2BAAO8J,IAAP,IAAexP,WAAaiS,EAAGtJ,MAASsJ,EAAGY,MAAcZ,EAAGY,WAAa9P,EAAL,GAAjB,KACxDM,QAAS,kBAAM2P,EAAef,EAAGrP,IAAIoI,MAErC,kBAAC,KAAD,CAAaW,SAAS,eAKrCsG,EAAGrP,IAAIuQ,QAAUlB,EAAGrP,IAAImQ,SACrB,kBAACvE,GAAA,EAAD,CAAUvM,UAAWD,EAAQtC,MACzB,kBAAC,GAAD,CAAcgG,MAAO,CAAE/F,cAAe,EAAGgG,WAAY,GAAKiM,QAAS,GAC/D,kBAACwB,GAAA,EAAD,CAAUC,GAAIjS,EAAMkS,QAAQ,OAAOC,eAAa,GAC5C,kBAACC,GAAA,EAAD,CAAKC,OAAQ,GACT,kBAACnQ,EAAA,EAAD,CAAYC,QAAQ,KAAK6I,cAAY,EAAC9J,UAAU,OAAhD,WAGA,kBAACwN,GAAA,EAAD,CAAOC,KAAK,QAAQ2D,aAAW,aAC3B,kBAACnF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAAC,GAAD,aACA,kBAAC,GAAD,eACA,kBAAC,GAAD,eACA,kBAAC,GAAD,iBACA,kBAAC,GAAD,CAAcoD,QAAS,GAAvB,cAGR,kBAAC1B,GAAA,EAAD,KACK+B,EAAGrP,IAAImQ,QAAQnQ,KAAI,SAAC+Q,EAAWhC,GAC5B,OACI,kBAAC,GAAD,CACIM,GAAI0B,EACJtR,IAAKsP,EACLO,gBAAiBA,eAoFtDtC,GArEM,SAAC,GAAsC,IAApCzD,EAAmC,EAAnCA,KAAMyH,EAA6B,EAA7BA,MAAO1B,EAAsB,EAAtBA,gBAAsB,EACG/S,IAAMgC,SAASmO,IADlB,0BAC9C3C,EAD8C,EAC9CA,MAAO4C,EADuC,EACvCA,YAAa3C,EAD0B,EAC1BA,QAAStL,EADiB,EACjBA,KAAQuO,EADS,OAEzB1Q,IAAMgC,SAAS,MAFU,mBAEhD4R,EAFgD,KAEvCc,EAFuC,KAcjDb,EAAiB7T,IAAMwI,aACzB,SAACqD,GAEO6I,EADAd,IAAY/H,EACDA,EAEA,QAGnB,CAAC+H,EAASc,IAGR7R,EAAUzC,KAEhB,OACI,yBAAK0C,UAAWD,EAAQtC,MACpB,kBAACoQ,GAAA,EAAD,CAAOC,KAAK,SACR,kBAAC,GAAD,CAAkBpD,MAAOA,EAAOC,QAASA,EAASyB,cA1BpC,SAAC7G,EAAGqK,GAC1B,IAAM7B,EAAa6B,EAEnBhC,GAAS,SAAC9N,GAAD,mBAAC,eACHA,GADE,IAEL4K,MAAO5K,EAAM6K,UAAYoD,GAAqC,SAAhBjO,EAAM4K,MAAd,MAAyC,OAC/EC,QAAS7K,EAAM6K,UAAYoD,GAA8B,QAAhBjO,EAAM4K,MAAkB,YAAcqD,UAqB3E,kBAACE,GAAA,EAAD,KACKzD,GAAWN,EAAMQ,EAAOC,GACpBuD,MAAM7O,EAAOiO,EAAajO,EAAOiO,EAAcA,GAC/C3M,KAAI,SAACqP,EAAIN,GACN,OACI,kBAAC,GAAD,CACIM,GAAIA,EACJrF,QAASA,EACTsF,gBAAiBA,EACjBa,QAASA,EACTC,eAAgBA,EAChB3Q,IAAKsP,QAKzB,kBAACzB,GAAA,EAAD,KACK0D,EAAME,UAAY,GACf,kBAACtF,GAAA,EAAD,KACI,kBAAC,GAAD,CAAcN,MAAM,SAApB,cACA,kBAAC,GAAD,KACI,kBAACS,GAAA,EAAD,CACI9N,MAAO2Q,KAAOhB,SAASoD,EAAME,UAAW,MAAMC,WAC9CnF,UAAU,aACVC,WAAY,KAEZ,8BAAO4B,GAAYmD,EAAME,cAGjC,kBAAC,GAAD,CAAclC,QAAS,S,8BCvUpCoC,iBA3DM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,OAAQrT,EAAyB,EAAzBA,MAAOpB,EAAkB,EAAlBA,MAAO0U,EAAW,EAAXA,KAC5CC,EAAqC,SAAvB3U,EAAMgB,QAAQsK,KAElC,GAAIoJ,EAAM,CACN,IAAMA,EAAOD,EAAO/D,MAAM,IAAItC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAOC,IAAK,GAE/DmG,EAASA,EAAO/D,MAAM,EAAG,IACzB8D,EAASA,EAAO9D,MAAM,EAAG,IAEzB+D,EAAO3I,KAAK4I,GACZF,EAAO1I,KAAK,QAGhB,OACI,kBAAC,KAAD,CACI8I,QAAS,CACLJ,SACAK,OAAQ,CACJC,MAAM,GAEVC,WAAY,CACR,CACIC,WAAY,IACZJ,QAAS,CACLK,MAAO,CACHrF,OAAQ,YAKxBsF,YAAa,CACTC,IAAK,CACDC,MAAO,CACHZ,OAAQ,CACJM,MAAM,EACN7I,KAAM,CACF6I,MAAM,GAEVO,MAAO,CACHP,MAAM,EACN/T,MAAO4T,EAAc,QAAU,SAEnCW,MAAO,CACHR,MAAM,EACN/N,MAAO3F,EACPL,MAAO4T,EAAc,QAAU,cAOvDF,OAAQA,EACRnJ,KAAK,QACLsE,OAAO,W,yCCnDb9P,GAAYC,aAAW,SAACgI,GAAD,MAAQ,CACjCwN,IAAK,CACDvB,OAAQ,EACRwB,IAAK,OACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,OACNpS,SAAU,aAIZqS,GAAY,YACO,SAAfC,IACF,IAAMC,EAAI3T,SAAS4T,gBAAgBC,UAC/BF,EAAI,IACJrN,OAAOwN,sBAAsBJ,GAC7BpN,OAAOyN,SAAS,EAAGJ,EAAIA,EAAI,IAGnCD,IAgBWM,GAbc,WAAO,IACxBL,EbRa,WACrB,IAAMjC,EAAUnU,IAAMC,YAAO2D,GADF,EAED5D,IAAMgC,SAAS,CAAEM,EAAG,EAAG8T,EAAG,IAFzB,mBAEpBxT,EAFoB,KAEb8N,EAFa,KAIrBgG,EAAW1W,IAAMwI,aAAY,WAC/BmO,aAAaxC,EAAQhU,SACrBgU,EAAQhU,QAAUyW,YAAW,WACzBlG,EAAS,CAAEpO,EAAGyG,OAAO8N,QAAST,EAAGrN,OAAO+N,YACzC,OACJ,CAACpG,IAUJ,OARA1Q,IAAME,WAAU,WAEZ,OADA6I,OAAOwC,iBAAiB,SAAUmL,GAC3B,WACHC,aAAaxC,EAAQhU,SACrB4I,OAAOyC,oBAAoB,SAAUkL,MAE1C,CAACA,IAEG9T,EaXOmU,GAANX,EACFvT,EAAUzC,KAEhB,OACI,kBAAC4W,GAAA,EAAD,CAAM9C,GAAU,IAANkC,EAASjC,QAAS,KACxB,kBAAC8C,GAAA,EAAD,CAAKvV,MAAM,cAAcL,MAAM,YAAYyB,UAAWD,EAAQgT,IAAK3R,QAASgS,IACxE,kBAAC,KAAD,S,8BCjBD,O,WAlBX,aAAe,oBACXzQ,KAAKyR,QAGK,+E,+FAEAC,EAAOhF,G,wFACCiF,MAAM,GAAD,OAAI3R,KAAKyR,QAAT,YAAoBC,EAApB,YAA6BhF,GAAQ,SAArC,U,UAAjBkF,E,OACNC,QAAQC,IAAR,cAAmBF,EAAIG,IAAvB,aAA+BH,EAAII,OAAnC,MAEKJ,EAAIK,G,sBACC,IAAIxR,MAAMmR,EAAIM,Y,uBAGXN,EAAIO,O,yJCMnBxX,GAAYC,aAAW,SAACgI,GAAD,MAAQ,CACjCwP,OAAQ,CACJrR,WAAY,YA0ML1E,iBAtMK,SAAC,GAAe,IAAbgW,EAAY,EAAZA,MACbhQ,EAAYhI,IADa,EAGPE,IAAMgC,cAAS4B,GAHR,mBAGxBmU,EAHwB,KAGlBC,EAHkB,OAIThY,IAAMgC,SAAS,GAJN,mBAIxBiW,EAJwB,KAInBC,EAJmB,KAMzB/V,EAAO2V,EAAMK,OAAO,GACpBhG,EAAO2F,EAAMK,OAAOhG,KACpBiG,OAAgBxU,IAATuO,GAA+B,WAATA,EAEnCnS,IAAME,WAAU,WACZgY,EAAO,GACPF,OAAQpU,KACT,CAACzB,IAEJnC,IAAME,WAAU,WACZmY,GAAIC,QAAQ,WACPC,MAAK,YAAoB,IAAjBC,EAAgB,EAAhBA,UACCC,EAAepG,KAAOF,EAAM,CAAC,eAC7BuG,GAAYN,GAAQK,EAAaE,UAEvC,GAAID,EAAU,CAAC,IAAD,iBACaF,GADb,2BACCI,EADD,uBAEYA,EAASC,MAFrB,yBAEKpV,EAFL,QAGFA,EAAImQ,QAAUnQ,EAAImQ,QAAQpQ,QAAO,gBAAG2O,EAAH,EAAGA,KAAH,OAAcE,KAAOF,GAAMG,KAAKmG,EAAc,MAAQ,KAEvF,IAAMK,EAAYrV,EAAImQ,QAAQnQ,EAAImQ,QAAQ1H,OAAS,GACnDzI,EAAI2N,IAAM3N,EAAImQ,QAAQpQ,QAAO,SAACsP,GAAD,OAAQA,EAAGvB,QAAUuH,EAAUvH,SAC5D9N,EAAI2N,IAAI3G,SAAQ,SAACqI,GACbA,EAAGO,SAAW,CAAExH,GAAI,MACpBiH,EAAGzB,SAAWoH,EAAanG,KAAKD,KAAOS,EAAGX,MAAO,SAPzD,2BAAkC,IAF5B,8BAaN,IAAMwC,EAAYiE,EAASC,KAAKpV,KAAI,SAACsV,GAAD,OAAOA,EAAE3H,IAAI,GAAGG,SAAO7C,QAAO,SAACf,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAE7EoL,EAAQJ,EAASC,KAClBpV,KAAI,SAACsV,GAAD,OAAOA,EAAE3H,IAAI3N,KAAI,SAACwV,GAAD,OAAOA,EAAEhI,WAC9BvC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAIuK,OAAOtK,KAAM,IACrCwC,EAAMwH,EAASC,KAAKpV,KAAI,SAACsV,GAAD,OAAOA,EAAE3H,OAAK1C,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAIuK,OAAOtK,KAAM,IAE5EuK,EAAYH,EAAMtK,QAAO,SAAC0K,EAAOnI,GAEnC,OADAmI,EAAMnI,EAAKpF,KAAOuN,EAAMnI,EAAKpF,KAAO,GAAK,EAClCuN,IACR,IAEGC,EAAc9O,OAAOC,KAAK2O,GAC3BjL,MAAK,SAACP,EAAGC,GAAJ,OAAUuL,EAAUvL,GAAKuL,EAAUxL,MACxClK,KAAI,SAACP,GAAD,MAAU,CACX+N,KAAM+H,EAAM3W,MAAK,SAACiX,GAAD,OAAOA,EAAEzN,KAAO3I,KACjCkO,IAAK+H,EAAUjW,GACfmO,SAAUqH,EACJtH,EACK5N,QAAO,SAACyV,GAAD,OAAOA,EAAEhI,KAAKpF,KAAO3I,KAC5BO,KAAI,SAACwV,GAAD,OAAOA,EAAE5H,YACb3C,QAAO,SAACf,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,QAC7BhK,MAGdgV,EAASnE,MAAQ,CACbE,YACA0E,gBAvCR,2BAAmC,IADzB,+BAJO,qBAiDEb,GAjDF,2BAiDVI,EAjDU,QAkDX/J,EAAO,GAETlL,EAAQ,EApDK,eAqDmBiV,EAASC,MArD5B,IAqDjB,2BAAmD,CAAC,IAAD,YAAtCpV,EAAsC,EAAtCA,IAAK2N,EAAiC,EAAjCA,IAAKwC,EAA4B,EAA5BA,QAA4B,eAC9BxC,GAD8B,IAC/C,2BAAsB,CAAC,IAAZ0B,EAAW,QACZyG,EAASlH,KAAOS,EAAGX,MACnBd,EAAW+G,EAAO/F,OAASC,KAAKiH,EAAQ,KAAOzG,EAAGzB,SAExDxC,EAAKzC,KAAL,yBACI3I,IAAK,CACDoI,GAAIpI,EAAI+V,WACRjN,KAAM9I,EAAIgW,MACV3F,QAAShB,IAAO1B,EAAI,GACpB4C,OAAQlB,IAAO1B,EAAIA,EAAIlF,OAAS,GAChC6H,QAAS3C,EAAIlF,OACb0H,UACAjQ,UAEDmP,GAVP,IAWIzB,eAhBuC,gCAoB7C1N,GAzEW,8BA4EjBiV,EAASC,KAAOhK,EAEZuJ,GACAQ,EAASnE,MAAM4E,YAAY5O,SAAQ,SAACiP,EAAOlH,GACvCoG,EAASnE,MAAM4E,YAAY7G,GAAKnB,SAAWuH,EAASC,KAC/CrV,QAAO,SAACyV,GAAD,OAAOA,EAAEhI,KAAKpF,KAAO6N,EAAMzI,KAAKpF,MACvCpI,KAAI,SAACwV,GAAD,OAAOA,EAAE5H,YACb3C,QAAO,SAACf,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,OAlCzC,2BAAmC,IAjDd,8BAwFjB9F,EAAU3H,SACV6X,EAAQQ,MAGfmB,OAAM,SAACC,GACJtC,QAAQsC,MAAMA,GAEV9R,EAAU3H,SACV6X,EAAQ,WAGrB,CAAClQ,EAAW3F,EAAMgQ,EAAMiG,IAE3B,IAAMyB,EAAY7Z,IAAMwI,aAAY,SAACH,EAAGyR,GAAJ,OAAiB5B,EAAO4B,KAAW,CAAC5B,IAElErV,EAAUzC,KAEhB,OACI,kBAAC,EAAD,KACI,kBAACyG,EAAA,EAAD,UACcjD,IAATmU,EACG,kBAACgC,GAAA,EAAD,MACS,OAAThC,GAAiC,IAAhBA,EAAK7L,OACtB,kBAACiB,GAAD,CAAaH,KAAK,aAElB,oCACK+K,EAAK7L,OAAS,GACX,kBAAC8N,GAAA,EAAD,CACIrE,MAAOsC,EACP7Q,SAAUyS,EACVI,eAAe,UACfC,UAAU,UACV9V,QAAQ,aACR+V,cAAc,QAEbpC,EAAKtU,KAAI,SAACmV,GAAD,OACN,kBAACwB,GAAA,EAAD,CAAK/S,MAAOuR,EAASrM,KAAMrJ,IAAK0V,EAASrM,WAIrD,kBAACpI,EAAA,EAAD,CAAYhB,UAAU,MAAMyB,KAAK,YAC7B,kBAACyP,GAAA,EAAD,CAAKgG,EAAG,GACJ,kBAACnV,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,SAAS0K,QAAQ,UACvC,kBAACpV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,IACX,kBAAC,GAAD,CACI4H,KAAM+K,EAAKE,GAAKY,KAChBpE,MAAOsD,EAAKE,GAAKxD,MACjB1B,gBAAiBqF,KAGzB,kBAAClT,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAItC,UAAWD,EAAQgV,QAClC,kBAAC3S,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAM0K,QAAQ,SAASC,aAAa,UAC1D,kBAACrV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAIC,GAAI,GACnB,kBAACmV,GAAD,CACIxN,KAAM+K,EAAKE,GAAKxD,MAAM4E,YACtBtG,gBAAiBqF,KAGzB,kBAAClT,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAIC,GAAI,EAAGvC,UAAWD,EAAQgV,QACzC,kBAAC3S,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,SAAS0K,QAAQ,UACvC,kBAACpV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,IACX,kBAAC,GAAD,CACI1D,MAAM,MACNoT,OAAQiD,EAAKE,GAAKxD,MAAM4E,YAAY5V,KAChC,SAACsD,GAAD,OAASA,EAAIkK,KAAK1E,QAEtBwI,OAAQgD,EAAKE,GAAKxD,MAAM4E,YAAY5V,KAAI,SAACsD,GAAD,OAASA,EAAIqK,UAG7D,kBAAClM,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAItC,UAAWD,EAAQgV,kBAmB9E,kBAAC,GAAD,U,wCCzKGhD,iBA/CY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,OAC5BE,GADuD,EAAnBvT,MACC,SADkB,EAAZpB,MACvBgB,QAAQsK,MAElC,OACI,kBAAC,KAAD,CACIsJ,QAAS,CACLuF,MAAO,CACHC,WAAY5F,GAEhBK,OAAQ,CACJC,MAAM,GAEVuF,WAAY,CACRjV,SAAS,GAEb6P,MAAO,CACHqF,QAAS,CACLxF,MAAM,GAEVyF,UAAW5F,EAAc,QAAU,SAEvC6F,QAAS,CACLxa,MAAO2U,EAAc,OAAS,SAElCI,WAAY,CACR,CACIC,WAAY,IACZJ,QAAS,CACLK,MAAO,CACHrF,OAAQ,YAKxBsF,YAAa,CACTuF,IAAK,CACDC,YAAY,KAIxBjG,OAAQA,EACRnJ,KAAK,MACLsE,OAAO,WCvBb9P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCuX,OAAQ,CACJrR,WAAY,QAEhByU,YAAa,CACT3G,OAAQhU,EAAMG,QAAQ,GACtBya,SAAU,SA4IHpZ,iBAxIM,SAAC,GAAe,IAAbgW,EAAY,EAAZA,MACdhQ,EAAYhI,IADc,EAGRE,IAAMgC,cAAS4B,GAHP,mBAGzBmU,EAHyB,KAGnBC,EAHmB,OAIVhY,IAAMgC,SAAS,GAJL,mBAIzBiW,EAJyB,KAIpBC,EAJoB,OAKRlY,IAAMgC,SAAS,eALP,mBAKzB4J,EALyB,KAKnBuP,EALmB,KAO1BC,EAAepb,IAAMwI,aACvB,SAACuH,GACGoL,EAAQpL,EAAMjH,OAAO6M,SAEzB,CAACwF,IAGChZ,EAAO2V,EAAMK,OAAO,GACpBhG,EAAO2F,EAAMK,OAAOhG,KACpBY,OAA2BnP,IAATuO,GAA+B,WAATA,EAE9CnS,IAAME,WAAU,WACZgY,EAAO,GACPF,OAAQpU,KACT,CAACzB,IAEJnC,IAAME,WAAU,WACZmY,GAAIC,QAAQ,QAASnG,GAChBoG,MAAK,YAAoB,IAAjBC,EAAgB,EAAhBA,UACD1Q,EAAU3H,SACV6X,EAAQQ,MAGfmB,OAAM,SAACC,GACJtC,QAAQsC,MAAMA,GAEV9R,EAAU3H,SACV6X,EAAQ,WAGrB,CAAClQ,EAAW3F,EAAMgQ,EAAMY,IAE3B,IAAM8G,EAAY7Z,IAAMwI,aACpB,SAACH,EAAGyR,GACA5B,EAAO4B,KAEX,CAAC5B,IAGCrV,EAAUzC,KAEhB,OACI,kBAAC,EAAD,KACI,kBAACyG,EAAA,EAAD,UACcjD,IAATmU,EACG,kBAACgC,GAAA,EAAD,MACS,OAAThC,GAAiC,IAAhBA,EAAK7L,OACtB,kBAACiB,GAAD,CAAaH,KAAK,aAElB,oCACK+K,EAAK7L,OAAS,GACX,kBAAC8N,GAAA,EAAD,CACIrE,MAAOsC,EACP7Q,SAAUyS,EACVI,eAAe,UACfC,UAAU,UACV9V,QAAQ,aACR+V,cAAc,QAEbpC,EAAKtU,KAAI,SAACmV,GAAD,OACN,kBAACwB,GAAA,EAAD,CAAK/S,MAAOuR,EAASrM,KAAMrJ,IAAK0V,EAASrM,WAIrD,kBAACpI,EAAA,EAAD,CAAYhB,UAAU,MAAMyB,KAAK,YAC7B,kBAACyP,GAAA,EAAD,CAAKgG,EAAG,GACJ,kBAACgB,GAAA,EAAD,CAAavY,UAAWD,EAAQoY,aAC5B,kBAACK,GAAA,EAAD,sBACA,kBAACC,GAAA,EAAD,CAAQ5F,MAAO/J,EAAMxE,SAAUgU,GAC3B,kBAACI,GAAA,EAAD,CAAU7F,MAAO,eAAjB,QACA,kBAAC6F,GAAA,EAAD,CAAU7F,MAAO,qBAAjB,UACA,kBAAC6F,GAAA,EAAD,CAAU7F,MAAO,sBAAjB,WAGR,kBAACzQ,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,SAAS0K,QAAQ,UACvC,kBAACpV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,IACX,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAM0K,QAAQ,SAASC,aAAa,UAC1D,kBAACrV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAIC,GAAI,GACnB,kBAACmV,GAAD,CACIxN,KAAM+K,EAAKE,GAAKxD,MAAM7I,GACtBuD,aAAuB,sBAATvD,EACdmH,gBAAiBA,KAGzB,kBAAC7N,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAIC,GAAI,EAAGvC,UAAWD,EAAQgV,QACzC,kBAAC3S,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,SAAS0K,QAAQ,UACvC,kBAACpV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,IACD,sBAATwG,EACG,kBAAC,GAAD,CACIlK,MAAM,MACNoT,OAAQiD,EAAKE,GAAKxD,MAAM7I,GACnBnI,KAAI,SAACsD,GAAD,OAASA,EAAIkK,KAAK1E,QACtByE,MAAM,EAAG,IACd+D,OAAQ,CACJ,CACIxI,KAAM,aACNS,KAAM+K,EAAKE,GAAKxD,MAAM7I,GACjBoF,MAAM,EAAG,IACTvN,KAAI,SAACsD,GAAD,OAASA,EAAIqK,WAKlC,kBAAC,GAAD,CACI1P,MAAM,MACNoT,OAAQiD,EAAKE,GAAKxD,MAAM7I,GAAMnI,KAC1B,SAACsD,GAAD,OAASA,EAAIkK,KAAK1E,QAEtBwI,OAAQgD,EAAKE,GAAKxD,MAAM7I,GAAMnI,KAAI,SAACsD,GAAD,OAASA,EAAIqK,OAC/C4D,KAAe,uBAATpJ,KAIlB,kBAAC1G,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAItC,UAAWD,EAAQgV,kBAW9E,kBAAC,GAAD,UCpJNhJ,GAAO,CACT,CAAEhD,GAAI,YAAaiD,UAAU,EAAOzH,MAAO,MAAO0H,MAAO,QACzD,CAAElD,GAAI,QAASiD,UAAU,EAAOzH,MAAO,OAAQ0H,MAAO,QACtD,CAAElD,GAAI,YAAaiD,UAAU,EAAOzH,MAAO,SAAU0H,MAAO,QAC5D,CAAElD,GAAI,QAASiD,UAAU,EAAOzH,MAAO,cAAe0H,MAAO,QAC7D,CAAElD,GAAI,OAAQiD,UAAU,EAAOzH,MAAO,OAAQ0H,MAAO,SAGnD0M,GAAyB,SAAC,GAAuC,IAArCjO,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAASyB,EAAoB,EAApBA,cAK9C,OACI,kBAACE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACKR,GAAKpL,KAAI,SAACsD,GAAD,OACN,kBAACuI,GAAA,EAAD,CACIpM,IAAK6D,EAAI8E,GACTkD,MAAOhI,EAAIgI,MACX1I,QAAQ,UACRkJ,cAAe9B,IAAY1G,EAAI8E,IAAK2B,IAElB,IAAjBzG,EAAI+H,UACD,kBAACU,GAAA,EAAD,CAAS9N,MAAO,WAAaqF,EAAIM,MAAOoI,UAAU,eAAeC,WAAY,KACzE,kBAACC,GAAA,EAAD,CACIvO,OAAQqM,IAAY1G,EAAI8E,GACxB+D,UAAWpC,EACXtJ,SAnBL2L,EAmBgC9I,EAAI8E,GAnB7BiE,EAmBiC/I,EAAIiI,IAnB3B,SAACe,GACzCb,EAAca,EAAOF,EAAOC,MAoBC/I,EAAIM,SAIC,IAAjBN,EAAI+H,UAAsB/H,EAAIM,OAzBzB,IAACwI,EAAOC,QAiChC1P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFyP,UAAW,QAEfC,OAAQ,CACJtP,MAAOL,EAAMG,QAAQ,GACrByP,OAAQ5P,EAAMG,QAAQ,GACtBK,YAAa,QAIfqP,GAAe,CACjB3C,MAAO,OACPC,QAAS,QACTW,OAAQ,OACRjM,KAAM,EACNiO,YAAa,IAGXC,GAAS,CAAEC,WAAY,UACvBC,GAAgB,CAAElK,QAAS,oBAC3BmK,GAAe,SAAC/I,GAAD,OAAW,kBAAC6H,GAAA,EAAD,eAAW/I,MAAOgK,IAAmB9I,KAiFtDgJ,GA/EM,SAAC,GAAc,IAAZzD,EAAW,EAAXA,KAAW,EACgBhN,IAAMgC,SAAN,eAAoBmO,KADpC,0BACtB3C,EADsB,EACtBA,MAAOC,EADe,EACfA,QAASW,EADM,EACNA,OAAUsC,EADJ,KAezB7N,EAAUzC,KAEhB,OACI,yBAAK0C,UAAWD,EAAQtC,MACpB,kBAACoQ,GAAA,EAAD,CAAOC,KAAK,SACR,kBAAC,GAAD,CAAwBpD,MAAOA,EAAOC,QAASA,EAASyB,cAjB1C,SAAC7G,EAAGwH,EAAOC,GACjC,IAAMe,EAAahB,EACbiB,EAAYhB,EAElBY,GAAS,SAAC9N,GAAD,mBAAC,eACHA,GADE,IAEL4K,MAAO5K,EAAM6K,UAAYoD,GAA8B,SAAhBjO,EAAM4K,MAAmB,MAAQ,OACxEC,QAASoD,EACTzC,OAAQ0C,UAUJ,kBAACC,GAAA,EAAD,KACK5C,GAAenB,EAAMQ,EAAOC,EAASW,GACjC3K,KAAI,SAACsD,GAAD,OACD,kBAACsI,GAAA,EAAD,CAAU1K,UAAW,EAAGzB,IAAK6D,EAAI8E,IAC7B,kBAAC,GAAD,CACItF,MAAO8J,GACPiD,QAAqB,aAAZ7F,GAAsC,cAAZA,EAA0B1G,EAAItD,IAAIsQ,QAAU,EAC/EhF,MAAM,QAEN,kBAAC1K,EAAA,EAAD,CACIhD,MAAM,UACNkG,KAAI,yCAAoCR,EAAItD,IAAIoI,IAChDvE,IAAI,aACJwB,OAAO,UAEN/B,EAAItD,IAAIgW,QAGjB,kBAAC,GAAD,CAAc1K,MAAM,QAAQuC,GAAYvK,EAAIwK,QAC5C,kBAAC,GAAD,CAAcxC,MAAM,QAChB,kBAAC7J,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAMsB,WAAW,UACvC,kBAACC,GAAA,EAAD,CAAQrO,UAAWD,EAAQoN,OAAQxD,IAAK1F,EAAIkK,KAAKhB,SACjD,kBAAC5L,EAAA,EAAD,CACIkC,MAAO8J,GACPhP,MAAM,UACNkG,KAAM,kCAAoCR,EAAIkK,KAAKpF,GACnDvE,IAAI,aACJwB,OAAO,UAEN/B,EAAIkK,KAAK1E,QAItB,kBAAC,GAAD,CAAcwC,MAAM,QACR,kCAAQuC,GAAYvK,EAAIiM,SAEpC,kBAAC,GAAD,CAAcjE,MAAM,QAChB,kBAACS,GAAA,EAAD,CACI9N,MAAO,kBAAC,KAAD,CAAQ6R,SAAO,GAAExM,EAAIoL,MAC5B1C,UAAU,aACVC,WAAY,KAEZ,kBAAC,KAAD,CACInJ,MAAK,aAAIlF,MAAO6Q,GAAuBnL,EAAIoL,OAAU9B,IACrDmD,OAAO,cAENzM,EAAIoL,gBCpI3CtD,GAAO,CACT,CAAEhD,GAAI,YAAaiD,UAAU,EAAOzH,MAAO,MAAO0H,MAAO,QACzD,CAAElD,GAAI,QAASiD,UAAU,EAAOzH,MAAO,OAAQ0H,MAAO,QACtD,CAAElD,GAAI,YAAaiD,UAAU,EAAOzH,MAAO,SAAU0H,MAAO,QAC5D,CAAElD,GAAI,WAAYiD,UAAU,EAAOzH,MAAO,WAAY0H,MAAO,QAC7D,CAAElD,GAAI,OAAQiD,UAAU,EAAOzH,MAAO,QAAS0H,MAAO,QACtD,CAAElD,GAAI,gBAAiBiD,UAAU,EAAOzH,MAAO,QAAS0H,MAAO,QAC/D,CAAElD,GAAI,qBAAsBiD,UAAU,EAAOzH,MAAO,YAAa0H,MAAO,SAGtE2M,GAAqB,SAAC,GAAuC,IAArClO,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAASyB,EAAoB,EAApBA,cAK1C,OACI,kBAACE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACKR,GAAKpL,KAAI,SAACsD,GAAD,OACN,kBAACuI,GAAA,EAAD,CACIpM,IAAK6D,EAAI8E,GACTkD,MAAOhI,EAAIgI,MACX1I,QAAQ,UACRkJ,cAAe9B,IAAY1G,EAAI8E,IAAK2B,IAElB,IAAjBzG,EAAI+H,UACD,kBAACU,GAAA,EAAD,CAAS9N,MAAO,WAAaqF,EAAIM,MAAOoI,UAAU,eAAeC,WAAY,KACzE,kBAACC,GAAA,EAAD,CACIvO,OAAQqM,IAAY1G,EAAI8E,GACxB+D,UAAWpC,EACXtJ,SAnBL2L,EAmBgC9I,EAAI8E,GAnB7BiE,EAmBiC/I,EAAIiI,IAnB3B,SAACe,GACzCb,EAAca,EAAOF,EAAOC,MAoBC/I,EAAIM,SAIC,IAAjBN,EAAI+H,UAAsB/H,EAAIM,OAzBzB,IAACwI,EAAOC,QAiChC1P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFyP,UAAW,QAEfC,OAAQ,CACJtP,MAAOL,EAAMG,QAAQ,GACrByP,OAAQ5P,EAAMG,QAAQ,GACtBK,YAAa,QAIfqP,GAAe,CACjB3C,MAAO,OACPC,QAAS,WACTW,OAAQ,OACRjM,KAAM,EACNiO,YAAa,IAGXC,GAAS,CAAEC,WAAY,UACvBC,GAAgB,CAAElK,QAAS,oBAC3BmK,GAAe,SAAC/I,GAAD,OAAW,kBAAC6H,GAAA,EAAD,eAAW/I,MAAOgK,IAAmB9I,KA2HtDgJ,GAzHM,SAAC,GAA+B,IAA7BzD,EAA4B,EAA5BA,KAAM+F,EAAsB,EAAtBA,gBAAsB,EACD/S,IAAMgC,SAAN,eAAoBmO,KADnB,0BACvC3C,EADuC,EACvCA,MAAOC,EADgC,EAChCA,QAASW,EADuB,EACvBA,OAAUsC,EADa,KAe1C7N,EAAUzC,KAEhB,OACI,yBAAK0C,UAAWD,EAAQtC,MACpB,kBAACoQ,GAAA,EAAD,CAAOC,KAAK,SACR,kBAAC,GAAD,CAAoBpD,MAAOA,EAAOC,QAASA,EAASyB,cAjBtC,SAAC7G,EAAGwH,EAAOC,GACjC,IAAMe,EAAahB,EACbiB,EAAYhB,EAElBY,GAAS,SAAC9N,GAAD,mBAAC,eACHA,GADE,IAEL4K,MAAO5K,EAAM6K,UAAYoD,GAA8B,SAAhBjO,EAAM4K,MAAmB,MAAQ,OACxEC,QAASoD,EACTzC,OAAQ0C,UAUJ,kBAACC,GAAA,EAAD,KACK5C,GAAenB,EAAMQ,EAAOC,EAASW,GACjC3K,KAAI,SAACsD,GAAD,OACD,kBAACsI,GAAA,EAAD,CAAU1K,UAAW,EAAGzB,IAAK6D,EAAI8E,IAC7B,kBAAC,GAAD,CACItF,MAAO8J,GACPiD,QAAqB,aAAZ7F,GAAsC,cAAZA,EAA0B1G,EAAItD,IAAIsQ,QAAU,EAC/EhF,MAAM,QAEN,kBAAC1K,EAAA,EAAD,CACIhD,MAAM,UACNkG,KAAI,yCAAoCR,EAAItD,IAAIoI,IAChDvE,IAAI,aACJwB,OAAO,UAEN/B,EAAItD,IAAIgW,QAGjB,kBAAC,GAAD,CAAc1K,MAAM,QAAQuC,GAAYvK,EAAIwK,QAC5C,kBAAC,GAAD,CAAcxC,MAAM,QAChB,kBAAC7J,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAMsB,WAAW,UACvC,kBAACC,GAAA,EAAD,CAAQrO,UAAWD,EAAQoN,OAAQxD,IAAK1F,EAAIkK,KAAKhB,SACjD,kBAAC5L,EAAA,EAAD,CACIkC,MAAO8J,GACPhP,MAAM,UACNkG,KAAM,kCAAoCR,EAAIkK,KAAKpF,GACnDvE,IAAI,aACJwB,OAAO,UAEN/B,EAAIkK,KAAK1E,QAItB,kBAAC,GAAD,CAAcwC,MAAM,QAChB,kBAACS,GAAA,EAAD,CAAS9N,MAAM,UAAU+N,UAAU,aAAaC,WAAY,KACvDqD,GAAuC,OAApBhM,EAAIsM,SAASxH,GAC7B,kBAAC,KAAD,CAAQtF,MAAO8J,GAAQiC,KAAMvL,EAAIoL,KAAMsB,KAAK,SAE5C,8BAAO1M,EAAIsK,YAIvB,kBAAC,GAAD,CAActC,MAAM,QAChB,kBAACS,GAAA,EAAD,CACI9N,MAAO,kBAAC,KAAD,CAAQ6R,SAAO,GAAExM,EAAIoL,MAC5B1C,UAAU,aACVC,WAAY,KAEZ,kBAAC,KAAD,CACInJ,MAAK,aAAIlF,MAAO6Q,GAAuBnL,EAAIoL,OAAU9B,IACrDmD,OAAO,cAENzM,EAAIoL,QAIjB,kBAAC,GAAD,CAAcpD,MAAM,QACfhI,EAAIsM,SAASxH,GACV,kBAAC2D,GAAA,EAAD,CACI9N,MAAO,kBAAC,KAAD,CAAQ6R,SAAO,GAAExM,EAAIsM,SAASlB,MACrC1C,UAAU,aACVC,WAAY,KAEZ,kBAAC,KAAD,CACInJ,MAAK,aAAIlF,MAAO6Q,GAAuBnL,EAAIsM,SAASlB,OAAU9B,IAC9DmD,OAAO,cAENzM,EAAIsM,SAASlB,OAItB,0CAGR,kBAAC,GAAD,CAAcpD,MAAM,QACfhI,EAAIsM,SAASxH,GACV,kBAAC3G,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAMsB,WAAW,UACvC,kBAACC,GAAA,EAAD,CAAQrO,UAAWD,EAAQoN,OAAQxD,IAAK1F,EAAIsM,SAASpC,KAAKhB,SAC1D,kBAAC5L,EAAA,EAAD,CACIkC,MAAO8J,GACPhP,MAAM,UACNkG,KAAM,kCAAoCR,EAAIsM,SAASpC,KAAKpF,GAC5DvE,IAAI,aACJwB,OAAO,UAEN/B,EAAIsM,SAASpC,KAAK1E,OAI3B,mDC7KlCnM,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCuX,OAAQ,CACJrR,WAAY,QAEhByU,YAAa,CACT3G,OAAQhU,EAAMG,QAAQ,GACtBya,SAAU,SA2FHpZ,iBAvFG,SAAC,GAAe,IAAbgW,EAAY,EAAZA,MACXhQ,EAAYhI,IADW,EAGLE,IAAMgC,cAAS4B,GAHV,mBAGtBmU,EAHsB,KAGhBC,EAHgB,OAILhY,IAAMgC,SAAS,kBAJV,mBAItB4J,EAJsB,KAIhBuP,EAJgB,KAMvBC,EAAepb,IAAMwI,aACvB,SAACuH,GACGoL,EAAQpL,EAAMjH,OAAO6M,SAEzB,CAACwF,IAGChZ,EAAO2V,EAAMK,OAAO,GACpBhG,EAAO2F,EAAMK,OAAOhG,KACpBY,OAA2BnP,IAATuO,GAA+B,WAATA,EAE9CnS,IAAME,WAAU,WACZ8X,OAAQpU,KACT,CAACzB,IAEJnC,IAAME,WAAU,WACZmY,GAAIC,QAAQ,QAASnG,GAChBoG,MAAK,SAACR,GACCjQ,EAAU3H,SACV6X,EAAQD,MAGf4B,OAAM,SAACC,GACJtC,QAAQsC,MAAMA,GAEV9R,EAAU3H,SACV6X,EAAQ,WAGrB,CAAClQ,EAAW3F,EAAMgQ,EAAMY,IAE3B,IAAM4I,EAAkB,WACpB,OAAQ/P,GACJ,IAAK,iBACD,OAAOgQ,GACX,IAAK,qBACD,OAAOC,GACX,QACI,OAAO,MAPK,GAWlBhZ,EAAUzC,KAEhB,OACI,kBAAC,EAAD,KACI,kBAACyG,EAAA,EAAD,UACcjD,IAATmU,EACG,kBAACgC,GAAA,EAAD,MACS,OAAThC,EACA,kBAAC5K,GAAD,CAAaH,KAAK,aAElB,oCACI,kBAAC7I,EAAA,EAAD,CAAYhB,UAAU,MAAMyB,KAAK,YAC7B,kBAACyP,GAAA,EAAD,CAAKgG,EAAG,GACJ,kBAACgB,GAAA,EAAD,CAAavY,UAAWD,EAAQoY,aAC5B,kBAACK,GAAA,EAAD,mBACA,kBAACC,GAAA,EAAD,CAAQ5F,MAAO/J,EAAMxE,SAAUgU,GAC3B,kBAACI,GAAA,EAAD,CAAU7F,MAAO,kBAAjB,mBACA,kBAAC6F,GAAA,EAAD,CAAU7F,MAAO,sBAAjB,yBAGR,kBAACzQ,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,SAAS0K,QAAQ,UACvC,kBAACpV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,IACX,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACyK,UAAU,MAAM0K,QAAQ,SAASC,aAAa,UAC1D,kBAACrV,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,IACX,kBAACuW,EAAD,CAAgB3O,KAAM+K,EAAKnM,GAAOmH,gBAAiBA,YAUvF,kBAAC,GAAD,U,uCCtDG+I,G,oDAvDX,aAAuB,IAAD,iDAAPrU,EAAO,yBAAPA,EAAO,uBAClB,+BAASA,KAGbsU,OAAS,WAEL,GAAI,EAAKnZ,MAAM4P,IAAM,IAAM,EAAK/K,MAAMuU,SAAS9P,SAAW,EAAKzE,MAAMwU,MACjE,OAAOC,cAAc,EAAKtZ,MAAMuZ,YAGpC,EAAKzL,UAAS,SAAC0L,GAAe,IAAD,EACE,EAAKC,SAASD,EAAU5J,IAAM,GADhC,mBAClB8J,EADkB,KACRC,EADQ,KAGzB,MAAO,CACH/J,IAAK4J,EAAU5J,IAAM,EACrBgK,SAAUJ,EAAUE,SACpBA,SAAUA,EACVC,OAAQA,OAjBE,EAuBtBF,SAAW,SAACpQ,EAAGwQ,GAA8B,IAAlBC,EAAiB,uDAAN,EAC5BC,EAAUF,QAA6B7Y,IAAf6Y,EAA2B,SAAC9O,EAAGC,GAAJ,OAAUA,EAAEgB,IAAMjB,EAAEiB,KAAM,SAACjB,EAAGC,GAAJ,OAAUD,EAAEiB,IAAMhB,EAAEgB,KAEjGgO,EAASrS,OAAOC,KAAK,EAAK/C,MAAMuF,MACjCvJ,KAAI,SAAC8I,GACF,MAAO,CACHA,KAAMA,EACNqC,IAAK,EAAKnH,MAAMuF,KAAKT,GAAMN,OAGlC+E,MAAM,EAAG,EAAK6L,UACd3O,KAAKyO,GACLnZ,QAAO,SAACE,GAAD,OAAUA,EAAKkL,KAAO8N,KAE5BH,EAAS7K,KAAKoL,IAAIC,MACpBrL,KACAkL,EAAOnZ,KAAI,SAACC,GAAD,OAAUA,EAAKkL,QAG9B,MAAO,CACHgO,EAAOlO,QACH,SAACsO,EAAMC,EAAKzK,GAAZ,mBAAC,eACMwK,GADP,mBAEKC,EAAI1Q,KAAOiG,MAEhB,IAEJ+J,IAlDc,E,kBADFW,GC+HTpb,iBAlHE,SAAC,GAAe,IAAbgW,EAAY,EAAZA,MACVhQ,EAAYhI,IADU,EAGJE,IAAMgC,SAAS,CACnCgL,UAAMpJ,EACNkR,OAAQ,GACRqI,OAAQ,GACRC,IAAK,IAPmB,mBAGrBC,EAHqB,KAGfC,EAHe,OAUNtd,IAAMgC,UAAS,GAVT,mBAUrBub,EAVqB,KAUhBC,EAVgB,KAYtBrb,EAAO2V,EAAMK,OAAO,GACpBhG,EAAO2F,EAAMK,OAAOhG,KACpBY,OAA2BnP,IAATuO,GAA+B,WAATA,EAgD9C,OA9CAnS,IAAME,WAAU,WACZod,EAAQ,CAAEtQ,UAAMpJ,MACjB,CAACzB,IAEJnC,IAAME,WAAU,WACZmY,GAAIC,QAAQ,OAAQnG,GACfoG,MAAK,YAAe,IAAZvL,EAAW,EAAXA,KACL,GAAIlF,EAAU3H,QAAS,CACnB,IAAMsd,EAAUlT,OAAOC,KAAKwC,GACtBoQ,EAAMpQ,EAAKyQ,EAAQ,IAAIvR,OAE7BoR,EAAQ,CACJtQ,OACAgP,SAAU0B,MAAMN,GACXO,KAAK,GACLla,KAAI,SAAC4E,EAAGmK,GAAJ,OAAYH,KAAO,cAAcuL,IAAIpL,EAAK,QAAQgB,OAAO,iBAClEsB,OAAQ2I,EAAQ/O,QAAO,SAACsO,EAAMC,GAC1B,OAAO,2BACAD,GADP,mBAEKC,EACG,yBAAK1W,MAAO,CAAEsX,UAAW,QAASC,aAAc,SAC5C,6BAAMb,QAInB,IACHE,OAAQM,EAAQ/O,QACZ,SAACsO,EAAMC,GAAP,mBAAC,eACMD,GADP,mBAEKC,EA/Cb,cAAa,IAAMvL,KAAKqM,SAAxB,aAAqC,IAAMrM,KAAKqM,SAAhD,aAA6D,IAAMrM,KAAKqM,SAAxE,SAiDQ,IAEJX,YAIXzD,OAAM,SAACC,GACJtC,QAAQsC,MAAMA,GAEV9R,EAAU3H,SACVmd,EAAQ,CAAEtQ,KAAM,YAG7B,CAAClF,EAAW3F,EAAMgQ,EAAMY,IAGvB,kBAAC,EAAD,KACI,kBAAClM,EAAA,EAAD,UACmBjD,IAAdyZ,EAAKrQ,KACF,kBAAC+M,GAAA,EAAD,MACc,OAAdsD,EAAKrQ,KACL,kBAACG,GAAD,CAAaH,KAAK,aAElB,oCACI,kBAAC7I,EAAA,EAAD,CAAYhB,UAAU,MAAMyB,KAAK,YAC7B,yBACI2B,MAAO,CACH5F,MAAO,OACPuP,OAAQ,OACRpE,QAAS,OACTkS,eAAgB,UAEpB9Z,QAAS,kBAAMsZ,GAAO,SAACD,GAAD,OAAUA,OAEhC,kBAAC,GAAD,eACItB,MAAOsB,EACPpJ,QAAS,GACT8J,MAAO,EACPC,cAAe,CACXL,UAAW,SACXrR,SAAU,OACVnL,MAAO,qBACP8c,aAAc,SAElBC,aAAc,CACVP,UAAW,SACXxc,MAAO,qBACPmL,SAAU,QAEd6R,SAAU,CACNnO,OAAQ,OACRoO,UAAW,OACXC,aAAc,QAElB5d,MAAO,CAAC,GAAI,GAAI,KACZ0c,QAO5B,kBAAC,GAAD,UC3GNjd,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCke,MAAO,CACHF,UAAWhe,EAAMG,QAAQ,QAuDlBge,GAnDH,WAAO,IAAD,EACYze,IAAM0e,WAAN,MAAA1e,IAAK,YAAe+F,IADhC,mBACPnD,EADO,KACAgE,EADA,KAGRtG,EAAQN,IAAMoC,SAAQ,WACxB,OAAOuc,YAAe,CAClBrd,QAAS,CACLC,QAAS,CACLqd,MAAOC,IAAK,KACZrd,KAAMqd,IAAK,KACXC,KAAMD,IAAK,MAEfE,UAAW,CACPH,MAAOI,IAAO,KACdxd,KAAMwd,IAAO,KACbF,KAAME,IAAO,MAEjBpF,MAAO,CACHpY,KAAMyd,IAAIC,MAEdtT,KAAMhJ,EAAM4C,SAASE,QAAU,OAAS,aAGjD,CAAC9C,EAAM4C,SAASE,UAEb7C,EAAUzC,KACV+e,EAAUnf,IAAMoC,SAAQ,iBAAO,CAAEQ,QAAOgE,cAAa,CAAChE,EAAOgE,IAEnE,OACI,kBAACwY,EAAA,EAAD,CAAe9e,MAAOA,GAClB,kBAAC+e,EAAA,EAAD,MACA,kBAAC1Y,EAAS2Y,SAAV,CAAmB3J,MAAOwJ,GACtB,kBAAC,IAAD,CAAYI,SAAU,KAClB,kBAAC,EAAD,MACA,yBAAKzc,UAAWD,EAAQ2b,OACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUgB,OAAK,EAAC9V,KAAK,IAAIrG,GAAG,aAC5B,kBAAC,IAAD,CAAOmc,OAAK,EAAClR,KAAK,kBAAkBnL,UAAWsc,KAC/C,kBAAC,IAAD,CAAOD,OAAK,EAAClR,KAAK,gBAAgBnL,UAAWuc,KAC7C,kBAAC,IAAD,CAAOF,OAAK,EAAClR,KAAK,gBAAgBnL,UAAWwc,KAC7C,kBAAC,IAAD,CAAOH,OAAK,EAAClR,KAAK,eAAenL,UAAWyc,KAC5C,kBAAC,IAAD,CAAOJ,OAAK,EAAClR,KAAK,SAASnL,UAAWsD,IACtC,kBAAC,IAAD,CAAO+Y,OAAK,EAAClR,KAAK,QAAQnL,UAAW0E,KACrC,kBAAC,IAAD,CAAO1E,UAAW+J,WCrD1B2S,QACa,cAA7B9W,OAAOhH,SAAS+d,UAEiB,UAA7B/W,OAAOhH,SAAS+d,UAEhB/W,OAAOhH,SAAS+d,SAAShI,MAAM,2DCZvCiI,IAASC,OAAO,kBAAC,GAAD,MAASvd,SAAS6I,cAAc,UDoHxC,kBAAmB2U,WACnBA,UAAUC,cAAcC,MAAM5H,MAAK,SAAC6H,GAChCA,EAAaC,kB","file":"static/js/main.7e16eb62.chunk.js","sourcesContent":["import React from 'react';\n\nexport const useIsMounted = () => {\n    const ref = React.useRef(false);\n    React.useEffect(() => {\n        ref.current = true;\n        return () => (ref.current = false);\n    }, []);\n    return ref;\n};\n\nexport const useRenders = (debug) => {\n    const ref = React.useRef(0);\n    console.log(debug + ' renders: ', ++ref.current);\n};\n\nexport const useTitle = (title) => {\n    React.useEffect(() => {\n        document.title = title + ' - ' + document.location.host;\n    }, [title]);\n};\n\nexport const useScroll = () => {\n    const timeout = React.useRef(undefined);\n    const [state, setState] = React.useState({ x: 0, y: 0 });\n\n    const onScroll = React.useCallback(() => {\n        clearTimeout(timeout.current);\n        timeout.current = setTimeout(() => {\n            setState({ x: window.scrollX, y: window.scrollY });\n        }, 100);\n    }, [setState]);\n\n    React.useEffect(() => {\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            clearTimeout(timeout.current);\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, [onScroll]);\n\n    return state;\n};\n","import React from 'react';\nimport { Link as RouterLink, withRouter } from 'react-router-dom';\nimport MaterialAppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { useTitle } from '../Hooks';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingBottom: theme.spacing(8),\n    },\n    list: {\n        width: theme.spacing(25),\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    drawer: {\n        width: 240,\n        flexShrink: 0,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    flex: {\n        flex: 1,\n    },\n    active: {\n        color: theme.palette.primary.main,\n    },\n}));\n\nconst pageLinks = [\n    { title: '404 - Page Not Found', link: null, inDrawer: false },\n    { title: 'iverb-stats', link: '/', inDrawer: false },\n    { title: 'Records', link: '/records', inDrawer: true, default: true },\n    { title: 'Rankings', link: '/ranks', inDrawer: true, default: true },\n    { title: 'Statistics', link: '/stats', inDrawer: true, default: true },\n    { title: 'Race', link: '/race', inDrawer: true, default: true },\n    { title: 'Demo Inspection', link: '/demo', inDrawer: false },\n    { title: 'About', link: '/about', inDrawer: false },\n];\n\nconst AppBar = ({ location }) => {\n    const [open, setOpen] = React.useState(false);\n\n    const page = React.useMemo(\n        () =>\n            pageLinks.find(\n                (x) => x.link === location.pathname || (x.link !== null && location.pathname.startsWith(x.link + '/')),\n            ) || pageLinks[0],\n        [location],\n    );\n\n    useTitle(page.title);\n\n    const showDrawer = (state) => () => {\n        setOpen(state);\n    };\n\n    const classes = useStyles();\n\n    const list = (\n        <div className={classes.list}>\n            <List>\n                <ListItem button key={0} component={RouterLink} to={'/'}>\n                    <ListItemText primary=\"iverb-stats\" />\n                </ListItem>\n            </List>\n            <Divider />\n            <List>\n                {pageLinks\n                    .filter((x) => x.inDrawer)\n                    .map((item, index) => (\n                        <ListItem\n                            button\n                            key={index}\n                            component={RouterLink}\n                            to={item.link}\n                            className={item.title === page.title ? classes.active : undefined}\n                        >\n                            <ListItemText primary={item.title} />\n                        </ListItem>\n                    ))}\n                <Divider />\n                <List>\n                    <ListItem button key={0} component={RouterLink} to={'/demo'}>\n                        <ListItemText primary={'Demo Inspection'} />\n                    </ListItem>\n                    <ListItem button key={1} component={RouterLink} to={'/about'}>\n                        <ListItemText primary={'About'} />\n                    </ListItem>\n                </List>\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <MaterialAppBar className={classes.appBar} position=\"fixed\">\n                <Toolbar>\n                    <Hidden lgUp>\n                        <IconButton className={classes.menuButton} onClick={showDrawer(true)} color=\"inherit\">\n                            <MenuIcon />\n                        </IconButton>\n                    </Hidden>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        <Link component={RouterLink} to=\"/\" color=\"inherit\" underline=\"none\">\n                            iverb-stats\n                        </Link>\n                    </Typography>\n                </Toolbar>\n            </MaterialAppBar>\n            <Hidden lgUp implementation=\"css\">\n                <SwipeableDrawer open={open} onClose={showDrawer(false)} onOpen={showDrawer(true)} variant=\"temporary\">\n                    <div tabIndex={0} role=\"button\" onClick={showDrawer(false)} onKeyDown={showDrawer(false)}>\n                        {list}\n                    </div>\n                </SwipeableDrawer>\n            </Hidden>\n            <Hidden mdDown implementation=\"css\">\n                <Drawer variant=\"permanent\">\n                    <div tabIndex={0} role=\"button\">\n                        {list}\n                    </div>\n                </Drawer>\n            </Hidden>\n        </div>\n    );\n};\n\nexport default withRouter(AppBar);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nconst ViewContent = ({ children }) => (\n    <Grid container>\n        <Grid item xs={false} md={1} lg={2} />\n        <Grid item xs={12} md={10} lg={9}>\n            {children}\n        </Grid>\n    </Grid>\n);\n\nexport default ViewContent;\n","import React from 'react';\n\nclass DarkMode {\n    constructor() {\n        this.enabled = localStorage.getItem('dark_mode') === 'true';\n    }\n    toggle() {\n        this.enabled = !this.enabled;\n        localStorage.setItem('dark_mode', this.enabled.toString());\n        return this;\n    }\n}\n\nconst initialState = {\n    darkMode: new DarkMode(),\n};\n\nexport const AppReducer = [\n    (state, { action }) => {\n        switch (action) {\n            case 'toggleDarkMode':\n                return {\n                    ...state,\n                    darkMode: state.darkMode.toggle(),\n                };\n            default:\n                throw new Error('Unknown action type.');\n        }\n    },\n    initialState,\n];\n\nexport default React.createContext(initialState);\n","import React from 'react';\n/* import moment from 'moment';\nimport CircularProgress from '@material-ui/core/CircularProgress'; */\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Switch from '@material-ui/core/Switch';\n/* import Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip'; */\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ViewContent from './ViewContent';\nimport AppState from '../AppState';\n/* import { useIsMounted } from '../Hooks'; */\n\nconst useStyles = makeStyles((theme) => ({\n    aboutBox: {\n        padding: theme.spacing(3),\n    },\n}));\n\n/* const branches = [\n    { repo: 'NeKzor/iverb-stats', branch: 'master' },\n    { repo: 'NeKzBot/iverb-stats', branch: 'api' },\n    { repo: 'NeKzor/iverb-stats', branch: 'gh-pages' },\n];\n\nconst noWrap = { whiteSpace: 'nowrap' };\nconst MinTableCell = (props) => <TableCell size=\"small\" {...props} />; */\nconst Padding = () => <div style={{ paddingTop: '50px' }} />;\n\n/* const getUpdate = () => {\n    const now = moment.utc();\n    let updateIn = moment().utc().endOf('day');\n\n    if (updateIn.isBefore(now)) {\n        updateIn = moment().utc().endOf('day').add(1, 'day');\n    }\n\n    const duration = moment.duration({ from: now, to: updateIn });\n    const hours = duration.get('hours');\n    const minutes = duration.get('minutes');\n    const seconds = duration.get('seconds');\n\n    const g = (value) => (value === 1 ? '' : 's');\n    return `${hours} hour${g(hours)}, ${minutes} minute${g(minutes)}, ${seconds} second${g(seconds)}`;\n};\n\nlet clockTimer = null; */\n\nconst AboutView = () => {\n    /* const isMounted = useIsMounted(); */\n\n    const {\n        state: { darkMode },\n        dispatch,\n    } = React.useContext(AppState);\n\n    /* const [gitHub, setGitHub] = React.useState([]);\n    const [nextUpdate, setNextUpdate] = React.useState(getUpdate());\n\n    React.useEffect(() => {\n        clockTimer = setInterval(() => {\n            setNextUpdate(getUpdate());\n        }, 1000);\n\n        return () => clearInterval(clockTimer);\n    }, []); */\n\n    const toggleDarkMode = () => {\n        dispatch({ action: 'toggleDarkMode' });\n    };\n\n    /* React.useEffect(() => {\n        const anyErrors = (err) => {\n            console.error(err);\n            if (isMounted.current) {\n                setGitHub(undefined);\n            }\n        };\n\n        Promise.all(branches.map(({ repo, branch }) => fetch(`https://api.github.com/repos/${repo}/commits/${branch}`)))\n            .then((results) => {\n                Promise.all(results.map((res) => res.json()))\n                    .then((branches) => {\n                        if (isMounted.current) {\n                            setGitHub(\n                                branches.map((branch) => ({\n                                    sha: branch.sha,\n                                    author: branch.author ? branch.author : branch.commit.author,\n                                    message: branch.commit.message,\n                                    date: branch.commit.author.date,\n                                })),\n                            );\n                        }\n                    })\n                    .catch(anyErrors);\n            })\n            .catch(anyErrors);\n    }, [isMounted]); */\n\n    const classes = useStyles();\n\n    return (\n        <ViewContent>\n            <Paper className={classes.aboutBox}>\n                <Typography component=\"h2\" variant=\"h5\">\n                    Portal 2 World Records & Statistics\n                </Typography>\n                <br />\n                <Typography variant=\"body1\">aka iverb 1½</Typography>\n\n                {/* <Padding />\n\n                <Typography variant=\"h5\">Next Update</Typography>\n                <br />\n                {nextUpdate} */}\n\n                {/* <Padding />\n\n                <Typography variant=\"h5\">Changelog</Typography>\n                <br />\n\n                {gitHub === undefined ? (\n                    <Typography variant=\"body1\">Unable to fetch status from GitHub.</Typography>\n                ) : gitHub.length === 0 ? (\n                    <CircularProgress className={classes.progress} />\n                ) : (\n                    <div style={{ overflowX: 'auto' }}>\n                        <Table size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell padding=\"default\">\n                                        <Typography variant=\"body1\">Branch</Typography>\n                                    </TableCell>\n                                    <TableCell padding=\"default\">\n                                        <Typography variant=\"body1\">Date</Typography>\n                                    </TableCell>\n                                    <TableCell padding=\"default\">\n                                        <Typography variant=\"body1\">Author</Typography>\n                                    </TableCell>\n                                    <TableCell padding=\"default\">\n                                        <Typography variant=\"body1\">Commit</Typography>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {gitHub.map((commit, idx) => {\n                                    const { repo, branch } = branches[idx];\n                                    return (\n                                        <TableRow tabIndex={-1} key={idx} style={noWrap}>\n                                            <MinTableCell align=\"left\">\n                                                <Link\n                                                    color=\"inherit\"\n                                                    rel=\"noopener\"\n                                                    href={`https://github.com/${repo}/tree/${branch}`}\n                                                >\n                                                    {branch}\n                                                </Link>\n                                            </MinTableCell>\n                                            <MinTableCell align=\"left\" style={noWrap}>\n                                                <Tooltip title={moment(commit.date).toString()}>\n                                                    <span>{moment(commit.date).from()}</span>\n                                                </Tooltip>\n                                            </MinTableCell>\n                                            <MinTableCell align=\"left\">\n                                                {commit.author.html_url ? (\n                                                    <Link color=\"inherit\" rel=\"noopener\" href={commit.author.html_url}>\n                                                        {commit.author.login}\n                                                    </Link>\n                                                ) : (\n                                                    commit.author.name || 'n/a'\n                                                )}\n                                            </MinTableCell>\n                                            <MinTableCell align=\"left\" style={noWrap}>\n                                                <Tooltip title={commit.message}>\n                                                    <Link\n                                                        color=\"inherit\"\n                                                        rel=\"noopener\"\n                                                        href={`https://github.com/${repo}/commit/${commit.sha}`}\n                                                    >\n                                                        {commit.sha}\n                                                    </Link>\n                                                </Tooltip>\n                                            </MinTableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </div>\n                )} */}\n\n                <Padding />\n\n                <Typography variant=\"h5\">Theme Settings</Typography>\n                <br />\n                <FormGroup row>\n                    <FormControlLabel\n                        control={<Switch checked={darkMode.enabled} onChange={toggleDarkMode} color=\"primary\" />}\n                        label=\"Dark Mode\"\n                    />\n                </FormGroup>\n\n                <Padding />\n\n                <Typography variant=\"h5\">Credits</Typography>\n                <br />\n                <Link rel=\"noopener\" href=\"https://board.iverb.me\">\n                    board.iverb.me\n                </Link>\n                <br />\n                <Link rel=\"noopener\" href=\"https://github.com/NeKzor/sdp.js\">\n                    sdp.js\n                </Link>\n            </Paper>\n        </ViewContent>\n    );\n};\n\nexport default AboutView;\n","import React from 'react';\nimport ReactJson from 'react-json-view';\nimport Button from '@material-ui/core/Button';\n/* import Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'; */\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ViewContent from './ViewContent';\nimport { useIsMounted } from '../Hooks';\nimport { useTheme } from '@material-ui/core';\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst defaultReplay = {\n    info: 'drag & drop demo here :)',\n};\n\nconst DemoView = () => {\n    const isMounted = useIsMounted();\n    const theme = useTheme();\n\n    const [replay, setReplay] = React.useState(defaultReplay);\n    /* const [parseGhost, setParseGhost] = React.useState(true); */\n    const [errorMessage, setErrorMessage] = React.useState(false);\n\n    const handleClose = (_, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setErrorMessage(false);\n    };\n\n    /* const handleParseGhost = (event) => {\n        setParseGhost(event.target.checked);\n    }; */\n\n    const parseReplay = React.useCallback(\n        (file) => {\n            if (!file) return;\n\n            const reader = new FileReader();\n            reader.onload = ({ target: { result } }) => {\n                try {\n                    if (!isMounted.current) return;\n                    setReplay(defaultReplay);\n                    setErrorMessage(false);\n\n                    const { Buffer, SourceDemoParser, Speedrun } = window;\n\n                    const parser = SourceDemoParser.default();\n                    const speedrunTimer = Speedrun.SourceTimer.default();\n                    const sarTimer = Speedrun.SarTimer.default();\n\n                    const demo = (window.demo = parser.parse(Buffer.from(result)));\n\n                    // Fix message ticks\n                    demo.detectGame().adjustTicks();\n\n                    // Fix header\n                    demo.adjustRange();\n\n                    // Adjust 0-tick demos manually\n                    if (demo.playbackTicks === 0) {\n                        let ipt = demo.getIntervalPerTick();\n                        demo.playbackTicks = 1;\n                        demo.playbackTime = ipt;\n                    } else {\n                        // Speedrun rules apply here\n                        demo.speedrun = speedrunTimer.time(demo);\n\n                        // Check SAR support\n                        demo.sar = sarTimer.time(demo);\n                    }\n\n                    if (!isMounted.current) return;\n\n                    const removeData = (obj) => {\n                        Object.keys(obj).forEach((key) => {\n                            if (key === '_view') {\n                                delete obj._view;\n                            } else if (typeof obj[key] === 'object') {\n                                removeData(obj[key]);\n                            }\n                        });\n                    };\n\n                    removeData(demo);\n                    setReplay(demo);\n                } catch (err) {\n                    if (isMounted.current) {\n                        setErrorMessage(err.message);\n                    }\n                }\n            };\n            reader.readAsArrayBuffer(file);\n        },\n        [isMounted, /* parseGhost, */ setReplay, setErrorMessage],\n    );\n\n    const handleChange = React.useCallback((ev) => parseReplay(ev.target.files[0]), [parseReplay]);\n\n    const dropHandler = (ev) => {\n        ev.preventDefault();\n\n        const files = [];\n\n        if (ev.dataTransfer.items) {\n            for (let i = 0; i < ev.dataTransfer.items.length; ++i) {\n                if (ev.dataTransfer.items[i].kind === 'file') {\n                    files.push(ev.dataTransfer.items[i].getAsFile());\n                }\n            }\n        }\n\n        parseReplay(files[0]);\n        removeDragData(ev);\n    };\n\n    const dragOverHandler = (ev) => {\n        ev.preventDefault();\n    };\n\n    const removeDragData = (ev) => {\n        if (ev.dataTransfer.items) {\n            ev.dataTransfer.items.clear();\n        } else {\n            ev.dataTransfer.clearData();\n        }\n    };\n\n    React.useEffect(() => {\n        document.querySelector('#file').addEventListener('change', handleChange);\n        return () => document.querySelector('#file').removeEventListener('change', handleChange);\n    }, [handleChange]);\n\n    const openFile = () => {\n        document.querySelector('#file').click();\n    };\n\n    return (\n        <ViewContent>\n            <Paper style={{ padding: '20px 20px 20px 20px' }}>\n                <Button variant=\"contained\" color=\"primary\" disableElevation onClick={openFile}>\n                    Open file\n                </Button>\n                <input type=\"file\" id=\"file\" style={{ display: 'none' }} />\n                {/* <FormControlLabel\n                    style={{ marginLeft: '20px' }}\n                    control={<Checkbox color=\"primary\" checked={parseGhost} onChange={handleParseGhost} />}\n                    label=\"Parse Ghost\"\n                /> */}\n                <div style={{ paddingBottom: '20px' }}></div>\n                <div onDrop={dropHandler} onDragOver={dragOverHandler}>\n                    <ReactJson\n                        name=\"demo\"\n                        style={{ fontSize: '14px' }}\n                        src={replay}\n                        theme={theme.palette.type === 'light' ? 'bright:inverted' : 'solarized'}\n                        displayDataTypes={false}\n                        displayObjectSize={false}\n                        enableClipboard={false}\n                    />\n                </div>\n                <Snackbar open={errorMessage !== false} autoHideDuration={6000} onClose={handleClose}>\n                    <Alert onClose={handleClose} severity=\"error\">\n                        {errorMessage}\n                    </Alert>\n                </Snackbar>\n            </Paper>\n        </ViewContent>\n    );\n};\n\nexport default DemoView;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default ({ data, props }) => (\n    <Typography variant=\"h5\" gutterBottom style={{ padding: '50px 0px 50px 50px' }} {...props}>\n        {data}\n    </Typography>\n);\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport SimpleTitle from '../components/SimpleTitle';\nimport ViewContent from './ViewContent';\n\nconst NotFoundView = () => {\n    return (\n        <ViewContent>\n            <Paper>\n                <SimpleTitle data=\"Page not found :(\" />\n            </Paper>\n        </ViewContent>\n    );\n};\n\nexport default NotFoundView;\n","const cmpOptions = { numeric: true };\n\nexport const stableSort = (array, order, orderBy) => {\n    let desc = (a, b) => {\n        let aa = getPropFast(a, orderBy).toString();\n        let bb = getPropFast(b, orderBy).toString();\n        return bb.localeCompare(aa, undefined, cmpOptions);\n    };\n\n    let cmp = order === 'desc' ? (a, b) => desc(a, b) : (a, b) => -desc(a, b);\n\n    let sort = (a, b) => {\n        let order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    };\n\n    return array\n        .map((el, index) => [el, index])\n        .sort(sort)\n        .map((el) => el[0]);\n};\nexport const stableSortSort = (array, order, orderBy, thenBy) => {\n    if (orderBy === thenBy) {\n        return stableSort(array, order, orderBy);\n    }\n\n    let desc = (a, b) => {\n        let aa = getPropFast(a, orderBy).toString();\n        let bb = getPropFast(b, orderBy).toString();\n        let cmp = bb.localeCompare(aa, undefined, cmpOptions);\n        if (cmp !== 0) return cmp;\n        aa = getPropFast(a, thenBy).toString();\n        bb = getPropFast(b, thenBy).toString();\n        return bb.localeCompare(aa, undefined, cmpOptions);\n    };\n\n    let cmp = order === 'desc' ? (a, b) => desc(a, b) : (a, b) => -desc(a, b);\n\n    let sort = (a, b) => {\n        let order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    };\n\n    return array\n        .map((el, index) => [el, index])\n        .sort(sort)\n        .map((el) => el[0]);\n};\n\n// Util which returns the value of nested objects by string: getPropFast({ a: { b: 3 } }, 'a.b') === 3\nconst getPropFast = (obj, path) =>\n    path.indexOf('.') !== -1\n        ? path\n              .split('.')\n              .filter((s) => s)\n              .reduce((acc, val) => acc && acc[val], obj)\n        : obj[path];\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { stableSort, stableSortSort } from '../utils/stableSort';\n\nconst rows = [\n    { id: 'user.name', sortable: false, label: 'Player', align: 'left' },\n    { id: 'wrs', id2: 'duration', sortable: true, label: 'World Records', align: 'left' },\n    { id: 'duration', id2: 'wrs', sortable: true, label: 'Total Duration', align: 'left' },\n];\n\nconst RankingsTableHead = ({ order, orderBy, onRequestSort, showDuration }) => {\n    const createSortHandler = (prop1, prop2) => (event) => {\n        onRequestSort(event, prop1, prop2);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {rows\n                    .filter(({ id }) => id !== 'duration' || showDuration)\n                    .map((row) => (\n                        <TableCell\n                            key={row.id}\n                            align={row.align}\n                            padding=\"default\"\n                            sortDirection={orderBy === row.id ? order : false}\n                        >\n                            {row.sortable === true && (\n                                <Tooltip title={'Sort by ' + row.label} placement=\"bottom-start\" enterDelay={300}>\n                                    <TableSortLabel\n                                        active={orderBy === row.id}\n                                        direction={order}\n                                        onClick={createSortHandler(row.id, row.id2)}\n                                    >\n                                        {row.label}\n                                    </TableSortLabel>\n                                </Tooltip>\n                            )}\n                            {row.sortable === false && row.label}\n                        </TableCell>\n                    ))}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        overflowX: 'auto',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginRight: 10,\n    },\n}));\n\nconst defaultState = {\n    order: 'desc',\n    orderBy: 'wrs',\n    thenBy: 'duration',\n    page: 0,\n    rowsPerPage: 50,\n};\n\nconst noWrap = { whiteSpace: 'nowrap' };\nconst minifiedStyle = { padding: '7px 0px 7px 16px' };\nconst MinTableCell = (props) => <TableCell style={minifiedStyle} {...props} />;\n\nconst RecordsTable = ({ data, showDuration }) => {\n    const [{ order, orderBy, thenBy, rowsPerPage, page }, setState] = React.useState({ ...defaultState });\n\n    const handleRequestSort = (_, prop1, prop2) => {\n        const newOrderBy = prop1;\n        const newThenBy = prop2;\n\n        setState((state) => ({\n            ...state,\n            order: state.orderBy === newOrderBy && state.order === 'desc' ? 'asc' : 'desc',\n            orderBy: newOrderBy,\n            thenBy: newThenBy,\n        }));\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Table size=\"small\">\n                <RankingsTableHead\n                    order={order}\n                    orderBy={orderBy}\n                    onRequestSort={handleRequestSort}\n                    showDuration={showDuration}\n                />\n                <TableBody>\n                    {(showDuration ? stableSortSort : stableSort)(data, order, orderBy, thenBy)\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        .map((row) => (\n                            <TableRow tabIndex={-1} key={row.user.id}>\n                                <MinTableCell align=\"left\">\n                                    <Grid container direction=\"row\" alignItems=\"center\">\n                                        <Avatar className={classes.avatar} src={row.user.avatar} />\n                                        <Link\n                                            style={noWrap}\n                                            color=\"inherit\"\n                                            href={'https://board.iverb.me/profile/' + row.user.id}\n                                            rel=\"noreferrer\"\n                                            target=\"_blank\"\n                                        >\n                                            {row.user.name}\n                                        </Link>\n                                    </Grid>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">{row.wrs}</MinTableCell>\n                                {showDuration && (\n                                    <MinTableCell align=\"left\">\n                                        {row.duration} day{row.duration === 1 ? '' : 's'}\n                                    </MinTableCell>\n                                )}\n                            </TableRow>\n                        ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n};\n\nexport default RecordsTable;\n","import { scaleLinear } from 'd3-scale';\nimport moment from 'moment';\n\nexport function formatScore(score) {\n    if (score === undefined || score === null) {\n        return score;\n    }\n\n    let csec = score % 100;\n    let tsec = Math.floor(score / 100);\n    let sec = tsec % 60;\n    let min = Math.floor(tsec / 60);\n\n    return (min > 0 ? min + ':' : '') + (sec < 10 && min > 0 ? '0' + sec : sec) + '.' + (csec < 10 ? '0' + csec : csec);\n}\n\n// credits: https://github.com/iVerb1/Portal2Boards/blob/master/public/js/date.js#L21\nconst hourScale = scaleLinear()\n    .domain([0, 24, 14 * 24, 2 * 30 * 24])\n    .range(['#2eb82e', '#258e25', '#cca300', '#e67300']);\n\nexport function getDateDifferenceColor(date) {\n    const passedHours = moment().diff(moment(date), 'hours');\n    return passedHours <= 2 * 30 * 24 ? hourScale(passedHours) : undefined;\n}\n\nconst minuteScale = scaleLinear()\n    .domain([0, 8 * 60, 16 * 60, 24 * 60])\n    .range(['#2eb82e', '#cca300', '#e67300', '#e63200']);\n\nexport function getDateTimeDifferenceColor(pastMinutes) {\n    return pastMinutes >= 0 && pastMinutes <= 24 * 60 ? minuteScale(pastMinutes) : undefined;\n}\n","import React from 'react';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport HistoryIcon from '@material-ui/icons/History';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport { stableSort } from '../utils/stableSort';\nimport { formatScore, getDateDifferenceColor } from '../utils/tools';\n\nconst rows = [\n    { id: 'map.name', sortable: true, label: 'Chamber', align: 'left' },\n    { id: 'score', sortable: true, label: 'Record', align: 'left' },\n    { id: 'user.name', sortable: true, label: 'Player', align: 'left' },\n    { id: 'date', sortable: true, label: 'Date', align: 'left' },\n    { id: 'duration', sortable: true, label: 'Duration', align: 'left' },\n    { id: 'id', sortable: false, label: '', align: 'left' },\n];\n\nconst RecordsTableHead = ({ order, orderBy, onRequestSort }) => {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {rows.map((row, idx) => (\n                    <TableCell\n                        key={idx}\n                        align={row.align}\n                        padding=\"default\"\n                        sortDirection={orderBy === row.id ? order : false}\n                        colSpan={idx === rows.length - 1 ? 2 : 1}\n                    >\n                        {row.sortable === true && (\n                            <Tooltip title={'Sort by ' + row.label} placement=\"bottom-start\" enterDelay={300}>\n                                <TableSortLabel\n                                    active={orderBy === row.id}\n                                    direction={order}\n                                    onClick={createSortHandler(row.id)}\n                                >\n                                    {row.label}\n                                </TableSortLabel>\n                            </Tooltip>\n                        )}\n                        {row.sortable === false && row.label}\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        overflowX: 'auto',\n    },\n}));\n\nconst defaultState = {\n    order: 'asc',\n    orderBy: 'map.index',\n    page: 0,\n    rowsPerPage: 250,\n};\n\nconst noWrap = { whiteSpace: 'nowrap' };\nconst minifiedStyle = { padding: '7px 0px 7px 16px' };\nconst MinTableCell = (props) => <TableCell style={minifiedStyle} {...props} />;\n\nconst useRowStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginRight: 10,\n    },\n}));\n\nconst RecordsHistoryRow = ({ wr, useLiveDuration }) => {\n    const score = formatScore(wr.score);\n    const delta = wr.delta !== null ? formatScore(wr.delta) : null;\n\n    const renderCell = wr.isPartner !== false || !wr.partnerId;\n    const isCurrentWr = wr.beatenBy.id === null;\n\n    return (\n        <TableRow tabIndex={-1}>\n            {renderCell && (\n                <MinTableCell align=\"left\" rowSpan={wr.isPartner === true ? 2 : 1}>\n                    <Tooltip title={<Moment fromNow>{wr.date}</Moment>} placement=\"bottom-end\" enterDelay={300}>\n                        <Moment style={{ color: getDateDifferenceColor(wr.date), ...noWrap }} format=\"YYYY-MM-DD\">\n                            {wr.date}\n                        </Moment>\n                    </Tooltip>\n                </MinTableCell>\n            )}\n            {renderCell && (\n                <MinTableCell align=\"left\" rowSpan={wr.isPartner === true ? 2 : 1}>\n                    {score}\n                </MinTableCell>\n            )}\n            <MinTableCell align=\"left\">\n                <Link\n                    color=\"inherit\"\n                    href={`https://board.iverb.me/profile/${wr.user.id}`}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                >\n                    {wr.user.name}\n                </Link>\n            </MinTableCell>\n            {renderCell && (\n                <MinTableCell align=\"left\" rowSpan={wr.isPartner === true ? 2 : 1}>\n                    {delta ? '-' + delta : ''}\n                </MinTableCell>\n            )}\n            {renderCell && (\n                <MinTableCell align=\"left\" rowSpan={wr.isPartner === true ? 2 : 1}>\n                    <Tooltip title=\"in days\" placement=\"bottom-end\" enterDelay={300}>\n                        {useLiveDuration && isCurrentWr ? (\n                            <Moment style={noWrap} diff={wr.date} unit=\"days\"></Moment>\n                        ) : (\n                            <span>{wr.duration}</span>\n                        )}\n                    </Tooltip>\n                </MinTableCell>\n            )}\n            <MinTableCell align=\"left\" style={noWrap}>\n                {wr.demo && (\n                    <Tooltip title=\"Download Demo\" placement=\"bottom\" enterDelay={300}>\n                        <IconButton\n                            size=\"small\"\n                            style={noWrap}\n                            color=\"inherit\"\n                            href={'https://board.iverb.me/getDemo?id=' + wr.id}\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <SaveAltIcon fontSize=\"inherit\" />\n                        </IconButton>\n                    </Tooltip>\n                )}\n                {wr.media && (\n                    <Tooltip title=\"Watch on YouTube\" placement=\"bottom\" enterDelay={300}>\n                        <IconButton\n                            size=\"small\"\n                            style={{ ...noWrap, marginLeft: !wr.demo ? 24 : undefined }}\n                            color=\"inherit\"\n                            href={'https://youtu.be/' + wr.media}\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <YouTubeIcon fontSize=\"inherit\" />\n                        </IconButton>\n                    </Tooltip>\n                )}\n            </MinTableCell>\n        </TableRow>\n    );\n};\n\nconst RecordsRow = ({ wr, orderBy, useLiveDuration, history, onClickHistory }) => {\n    const score = formatScore(wr.score);\n    const delta = wr.delta !== null ? formatScore(wr.delta) : null;\n\n    const classes = useRowStyles();\n\n    const open = history === wr.map.id;\n\n    return (\n        <>\n            <TableRow tabIndex={-1}>\n                {(wr.map.isFirst || (orderBy !== 'map.name' && orderBy !== 'map.index')) && (\n                    <MinTableCell\n                        style={noWrap}\n                        rowSpan={orderBy === 'map.name' || orderBy === 'map.index' ? wr.map.records : 1}\n                        align=\"left\"\n                    >\n                        <Link\n                            color=\"inherit\"\n                            href={`https://board.iverb.me/chamber/${wr.map.id}`}\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                        >\n                            {wr.map.name}\n                        </Link>\n                    </MinTableCell>\n                )}\n                {(wr.map.isFirst || (orderBy !== 'map.name' && orderBy !== 'map.index')) && (\n                    <MinTableCell\n                        rowSpan={orderBy === 'map.name' || orderBy === 'map.index' ? wr.map.records : 1}\n                        align=\"left\"\n                    >\n                        {delta && (\n                            <Tooltip title={<span>-{delta} to former record</span>} placement=\"bottom\" enterDelay={300}>\n                                <span>{score}</span>\n                            </Tooltip>\n                        )}\n                        {!delta && <span>{score}</span>}\n                    </MinTableCell>\n                )}\n                <MinTableCell align=\"left\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Avatar className={classes.avatar} src={wr.user.avatar} />\n                        <Link\n                            color=\"inherit\"\n                            href={`https://board.iverb.me/profile/${wr.user.id}`}\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                        >\n                            {wr.user.name}\n                        </Link>\n                    </Grid>\n                </MinTableCell>\n                <MinTableCell align=\"left\">\n                    <Tooltip title={<Moment fromNow>{wr.date}</Moment>} placement=\"bottom-end\" enterDelay={300}>\n                        <Moment style={{ color: getDateDifferenceColor(wr.date), ...noWrap }} format=\"YYYY-MM-DD\">\n                            {wr.date}\n                        </Moment>\n                    </Tooltip>\n                </MinTableCell>\n                <MinTableCell align=\"left\">\n                    <Tooltip title=\"in days\" placement=\"bottom-end\" enterDelay={300}>\n                        {useLiveDuration ? (\n                            <Moment style={noWrap} diff={wr.date} unit=\"days\"></Moment>\n                        ) : (\n                            <span>{wr.duration}</span>\n                        )}\n                    </Tooltip>\n                </MinTableCell>\n                <MinTableCell align=\"left\" style={noWrap}>\n                    {wr.demo && (\n                        <Tooltip title=\"Download Demo\" placement=\"bottom\" enterDelay={300}>\n                            <IconButton\n                                size=\"small\"\n                                style={noWrap}\n                                color=\"inherit\"\n                                href={'https://board.iverb.me/getDemo?id=' + wr.id}\n                                rel=\"noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <SaveAltIcon fontSize=\"inherit\" />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    {wr.media && (\n                        <Tooltip title=\"Watch on YouTube\" placement=\"bottom\" enterDelay={300}>\n                            <IconButton\n                                size=\"small\"\n                                style={{ ...noWrap, marginLeft: !wr.demo ? 24 : undefined }}\n                                color=\"inherit\"\n                                href={'https://youtu.be/' + wr.media}\n                                rel=\"noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <YouTubeIcon fontSize=\"inherit\" />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    {wr.map.isLast && wr.map.history && (\n                        <IconButton\n                            color=\"inherit\"\n                            size=\"small\"\n                            style={{ ...noWrap, marginLeft: !wr.demo && !wr.media ? 48 : !wr.media ? 24 : undefined }}\n                            onClick={() => onClickHistory(wr.map.id)}\n                        >\n                            <HistoryIcon fontSize=\"inherit\" />\n                        </IconButton>\n                    )}\n                </MinTableCell>\n            </TableRow>\n            {wr.map.isLast && wr.map.history && (\n                <TableRow className={classes.root}>\n                    <MinTableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7}>\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                            <Box margin={1}>\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                    History\n                                </Typography>\n                                <Table size=\"small\" aria-label=\"purchases\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <MinTableCell>Date</MinTableCell>\n                                            <MinTableCell>Record</MinTableCell>\n                                            <MinTableCell>Player</MinTableCell>\n                                            <MinTableCell>Timesave</MinTableCell>\n                                            <MinTableCell colSpan={2}>Duration</MinTableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {wr.map.history.map((historyWr, idx) => {\n                                            return (\n                                                <RecordsHistoryRow\n                                                    wr={historyWr}\n                                                    key={idx}\n                                                    useLiveDuration={useLiveDuration}\n                                                />\n                                            );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </Box>\n                        </Collapse>\n                    </MinTableCell>\n                </TableRow>\n            )}\n        </>\n    );\n};\n\nconst RecordsTable = ({ data, stats, useLiveDuration }) => {\n    const [{ order, rowsPerPage, orderBy, page }, setState] = React.useState(defaultState);\n    const [history, setHistory] = React.useState(null);\n\n    const handleRequestSort = (_, property) => {\n        const newOrderBy = property;\n\n        setState((state) => ({\n            ...state,\n            order: state.orderBy === newOrderBy ? 'asc' : state.order === 'desc' ? 'asc' : 'desc',\n            orderBy: state.orderBy === newOrderBy && state.order === 'asc' ? 'map.index' : newOrderBy,\n        }));\n    };\n\n    const onClickHistory = React.useCallback(\n        (id) => {\n            if (history !== id) {\n                setHistory(id);\n            } else {\n                setHistory(null);\n            }\n        },\n        [history, setHistory],\n    );\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Table size=\"small\">\n                <RecordsTableHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\n                <TableBody>\n                    {stableSort(data, order, orderBy)\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        .map((wr, idx) => {\n                            return (\n                                <RecordsRow\n                                    wr={wr}\n                                    orderBy={orderBy}\n                                    useLiveDuration={useLiveDuration}\n                                    history={history}\n                                    onClickHistory={onClickHistory}\n                                    key={idx}\n                                />\n                            );\n                        })}\n                </TableBody>\n                <TableBody>\n                    {stats.totalTime > 0 && (\n                        <TableRow>\n                            <MinTableCell align=\"right\">Total Time</MinTableCell>\n                            <MinTableCell>\n                                <Tooltip\n                                    title={moment.duration(stats.totalTime, 'ms').humanize()}\n                                    placement=\"bottom-end\"\n                                    enterDelay={300}\n                                >\n                                    <span>{formatScore(stats.totalTime)}</span>\n                                </Tooltip>\n                            </MinTableCell>\n                            <MinTableCell colSpan={5}></MinTableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n        </div>\n    );\n};\n\nexport default RecordsTable;\n","import React from 'react';\nimport Chart from 'react-apexcharts';\nimport { withTheme } from '@material-ui/styles';\n\nconst RecordsChart = ({ labels, series, title, theme, rest }) => {\n    const isDarkTheme = theme.palette.type === 'dark';\n\n    if (rest) {\n        const rest = series.slice(11).reduce((acc, val) => acc += val, 0);\n\n        series = series.slice(0, 11);\n        labels = labels.slice(0, 11);\n\n        series.push(rest);\n        labels.push('Rest');\n    }\n\n    return (\n        <Chart\n            options={{\n                labels,\n                legend: {\n                    show: false,\n                },\n                responsive: [\n                    {\n                        breakpoint: 380,\n                        options: {\n                            chart: {\n                                height: '300px',\n                            },\n                        },\n                    },\n                ],\n                plotOptions: {\n                    pie: {\n                        donut: {\n                            labels: {\n                                show: true,\n                                name: {\n                                    show: true,\n                                },\n                                value: {\n                                    show: true,\n                                    color: isDarkTheme ? 'white' : 'black',\n                                },\n                                total: {\n                                    show: true,\n                                    label: title,\n                                    color: isDarkTheme ? 'white' : 'black',\n                                },\n                            },\n                        },\n                    },\n                },\n            }}\n            series={series}\n            type=\"donut\"\n            height=\"400\"\n        />\n    );\n};\n\nexport default withTheme(RecordsChart);\n","import React from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport Zoom from '@material-ui/core/Zoom';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { useScroll } from '../Hooks';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((_) => ({\n    fab: {\n        margin: 0,\n        top: 'auto',\n        right: 30,\n        bottom: 30,\n        left: 'auto',\n        position: 'fixed',\n    },\n}));\n\nconst jumpToTop = () => {\n    const smoothScroll = () => {\n        const y = document.documentElement.scrollTop;\n        if (y > 0) {\n            window.requestAnimationFrame(smoothScroll);\n            window.scrollTo(0, y - y / 5);\n        }\n    };\n    smoothScroll();\n};\n\nconst FloatingActionButton = () => {\n    const { y } = useScroll();\n    const classes = useStyles();\n\n    return (\n        <Zoom in={y !== 0} timeout={1000}>\n            <Fab title=\"Jump to top\" color=\"secondary\" className={classes.fab} onClick={jumpToTop}>\n                <KeyboardArrowUpIcon />\n            </Fab>\n        </Zoom>\n    );\n};\n\nexport default FloatingActionButton;\n","class Api {\n    constructor() {\n        this.baseApi =\n            process.env.NODE_ENV === 'development'\n                ? 'http://localhost:8080'\n                : 'https://raw.githubusercontent.com/NeKzor/nekzor.github.io/master/iverb-stats';\n    }\n    async request(route, date) {\n        const res = await fetch(`${this.baseApi}/${route}/${date || 'latest'}.json`);\n        console.log(`GET ${res.url} (${res.status})`);\n\n        if (!res.ok) {\n            throw new Error(res.statusText);\n        }\n\n        return await res.json();\n    }\n}\n\nexport default new Api();\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport moment from 'moment';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Paper from '@material-ui/core/Paper';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\nimport RankingsTable from '../components/RankingsTable';\nimport RecordsTable from '../components/RecordsTable';\nimport RecordsChart from '../components/RecordsChart';\nimport { makeStyles } from '@material-ui/core';\nimport FloatingActionButton from '../components/FloatingActionButton';\nimport Api from '../Api';\nimport { useIsMounted } from '../Hooks';\nimport ViewContent from './ViewContent';\nimport SimpleTitle from '../components/SimpleTitle';\n//import OverallTable from '../components/OverallTable';\n\nconst useStyles = makeStyles((_) => ({\n    padTop: {\n        paddingTop: '70px',\n    },\n}));\n\nconst RecordsView = ({ match }) => {\n    const isMounted = useIsMounted();\n\n    const [game, setGame] = React.useState(undefined);\n    const [tab, setTab] = React.useState(0);\n\n    const page = match.params[0];\n    const date = match.params.date;\n    const live = date === undefined || date === 'latest';\n\n    React.useEffect(() => {\n        setTab(0);\n        setGame(undefined);\n    }, [page]);\n\n    React.useEffect(() => {\n        Api.request('records')\n            .then(({ campaigns }) => {\n                const snapshotDate = moment(date, ['YYYY-MM-DD']);\n                const snapshot = !live && snapshotDate.isValid();\n\n                if (snapshot) {\n                    for (const campaign of campaigns) {\n                        for (const map of campaign.maps) {\n                            map.history = map.history.filter(({ date }) => moment(date).diff(snapshotDate, 'd') <= 0);\n\n                            const currentWr = map.history[map.history.length - 1];\n                            map.wrs = map.history.filter((wr) => wr.score === currentWr.score);\n                            map.wrs.forEach((wr) => {\n                                wr.beatenBy = { id: null };\n                                wr.duration = snapshotDate.diff(moment(wr.date), 'd');\n                            });\n                        }\n\n                        const totalTime = campaign.maps.map((t) => t.wrs[0].score).reduce((a, b) => a + b, 0);\n\n                        const users = campaign.maps\n                            .map((t) => t.wrs.map((r) => r.user))\n                            .reduce((acc, val) => acc.concat(val), []);\n                        const wrs = campaign.maps.map((t) => t.wrs).reduce((acc, val) => acc.concat(val), []);\n\n                        const frequency = users.reduce((count, user) => {\n                            count[user.id] = (count[user.id] || 0) + 1;\n                            return count;\n                        }, {});\n\n                        const leaderboard = Object.keys(frequency)\n                            .sort((a, b) => frequency[b] - frequency[a])\n                            .map((key) => ({\n                                user: users.find((u) => u.id === key),\n                                wrs: frequency[key],\n                                duration: snapshot\n                                    ? wrs\n                                          .filter((r) => r.user.id === key)\n                                          .map((r) => r.duration)\n                                          .reduce((a, b) => a + b, 0)\n                                    : undefined,\n                            }));\n\n                        campaign.stats = {\n                            totalTime,\n                            leaderboard,\n                        };\n                    }\n                }\n\n                for (const campaign of campaigns) {\n                    const rows = [];\n\n                    let index = 0;\n                    for (const { map, wrs, history } of campaign.maps) {\n                        for (const wr of wrs) {\n                            const wrDate = moment(wr.date);\n                            const duration = live ? moment().diff(wrDate, 'd') : wr.duration;\n\n                            rows.push({\n                                map: {\n                                    id: map.bestTimeId,\n                                    name: map.alias,\n                                    isFirst: wr === wrs[0],\n                                    isLast: wr === wrs[wrs.length - 1],\n                                    records: wrs.length,\n                                    history,\n                                    index,\n                                },\n                                ...wr,\n                                duration,\n                            });\n                        }\n\n                        ++index;\n                    }\n\n                    campaign.maps = rows;\n\n                    if (live) {\n                        campaign.stats.leaderboard.forEach((entry, idx) => {\n                            campaign.stats.leaderboard[idx].duration = campaign.maps\n                                .filter((r) => r.user.id === entry.user.id)\n                                .map((r) => r.duration)\n                                .reduce((a, b) => a + b, 0);\n                        });\n                    }\n                }\n\n                if (isMounted.current) {\n                    setGame(campaigns);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n\n                if (isMounted.current) {\n                    setGame(null);\n                }\n            });\n    }, [isMounted, page, date, live]);\n\n    const handleTab = React.useCallback((_, newValue) => setTab(newValue), [setTab]);\n\n    const classes = useStyles();\n\n    return (\n        <ViewContent>\n            <Paper>\n                {game === undefined ? (\n                    <LinearProgress />\n                ) : game === null || game.length === 0 ? (\n                    <SimpleTitle data=\"No data.\" />\n                ) : (\n                    <>\n                        {game.length > 1 && (\n                            <Tabs\n                                value={tab}\n                                onChange={handleTab}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                                variant=\"scrollable\"\n                                scrollButtons=\"auto\"\n                            >\n                                {game.map((campaign) => (\n                                    <Tab label={campaign.name} key={campaign.name} />\n                                ))}\n                            </Tabs>\n                        )}\n                        <Typography component=\"div\" role=\"tabpanel\">\n                            <Box p={3}>\n                                <Grid container direction=\"column\" justify=\"center\">\n                                    <Grid item xs={12}>\n                                        <RecordsTable\n                                            data={game[tab].maps}\n                                            stats={game[tab].stats}\n                                            useLiveDuration={live}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} className={classes.padTop}>\n                                        <Grid container direction=\"row\" justify=\"center\" alignContent=\"center\">\n                                            <Grid item xs={12} md={6}>\n                                                <RankingsTable\n                                                    data={game[tab].stats.leaderboard}\n                                                    useLiveDuration={live}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6} className={classes.padTop}>\n                                                <Grid container direction=\"column\" justify=\"center\">\n                                                    <Grid item xs={12}>\n                                                        <RecordsChart\n                                                            title=\"WRs\"\n                                                            labels={game[tab].stats.leaderboard.map(\n                                                                (row) => row.user.name,\n                                                            )}\n                                                            series={game[tab].stats.leaderboard.map((row) => row.wrs)}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} className={classes.padTop}></Grid>\n                                                </Grid>\n                                            </Grid>\n                                            {/* <Grid item xs={12} md={6} className={classes.padTop}>\n                                                <Typography variant=\"subtitle1\" component=\"h2\" gutterBottom>\n                                                    Overall Rankings\n                                                </Typography>\n                                                <br></br>\n                                                <OverallTable data={[]} />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}></Grid> */}\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Typography>\n                    </>\n                )}\n            </Paper>\n            <FloatingActionButton />\n        </ViewContent>\n    );\n};\n\nexport default withRouter(RecordsView);\n","import React from 'react';\nimport Chart from 'react-apexcharts';\nimport { withTheme } from '@material-ui/styles';\n\nconst UniqueRecordsChart = ({ labels, series, title, theme }) => {\n    const isDarkTheme = theme.palette.type === 'dark';\n\n    return (\n        <Chart\n            options={{\n                xaxis: {\n                    categories: labels,\n                },\n                legend: {\n                    show: false,\n                },\n                dataLabels: {\n                    enabled: false,\n                },\n                chart: {\n                    toolbar: {\n                        show: false,\n                    },\n                    foreColor: isDarkTheme ? 'white' : 'black',\n                },\n                tooltip: {\n                    theme: isDarkTheme ? 'dark' : 'light',\n                },\n                responsive: [\n                    {\n                        breakpoint: 380,\n                        options: {\n                            chart: {\n                                height: '300px',\n                            },\n                        },\n                    },\n                ],\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                    },\n                },\n            }}\n            series={series}\n            type=\"bar\"\n            height=\"800\"\n        />\n    );\n};\n\nexport default withTheme(UniqueRecordsChart);\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Paper from '@material-ui/core/Paper';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\nimport RankingsTable from '../components/RankingsTable';\nimport RecordsChart from '../components/RecordsChart';\nimport { makeStyles } from '@material-ui/core';\nimport FloatingActionButton from '../components/FloatingActionButton';\nimport Api from '../Api';\nimport { useIsMounted } from '../Hooks';\nimport ViewContent from './ViewContent';\nimport SimpleTitle from '../components/SimpleTitle';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport UniqueRecordsChart from '../components/UniqueRecordsChart';\n\nconst useStyles = makeStyles((theme) => ({\n    padTop: {\n        paddingTop: '70px',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n}));\n\nconst RankingsView = ({ match }) => {\n    const isMounted = useIsMounted();\n\n    const [game, setGame] = React.useState(undefined);\n    const [tab, setTab] = React.useState(0);\n    const [type, setType] = React.useState('leaderboard');\n\n    const onChangeType = React.useCallback(\n        (event) => {\n            setType(event.target.value);\n        },\n        [setType],\n    );\n\n    const page = match.params[0];\n    const date = match.params.date;\n    const useLiveDuration = date === undefined || date === 'latest';\n\n    React.useEffect(() => {\n        setTab(0);\n        setGame(undefined);\n    }, [page]);\n\n    React.useEffect(() => {\n        Api.request('ranks', date)\n            .then(({ campaigns }) => {\n                if (isMounted.current) {\n                    setGame(campaigns);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n\n                if (isMounted.current) {\n                    setGame(null);\n                }\n            });\n    }, [isMounted, page, date, useLiveDuration]);\n\n    const handleTab = React.useCallback(\n        (_, newValue) => {\n            setTab(newValue);\n        },\n        [setTab],\n    );\n\n    const classes = useStyles();\n\n    return (\n        <ViewContent>\n            <Paper>\n                {game === undefined ? (\n                    <LinearProgress />\n                ) : game === null || game.length === 0 ? (\n                    <SimpleTitle data=\"No data.\" />\n                ) : (\n                    <>\n                        {game.length > 1 && (\n                            <Tabs\n                                value={tab}\n                                onChange={handleTab}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                                variant=\"scrollable\"\n                                scrollButtons=\"auto\"\n                            >\n                                {game.map((campaign) => (\n                                    <Tab label={campaign.name} key={campaign.name} />\n                                ))}\n                            </Tabs>\n                        )}\n                        <Typography component=\"div\" role=\"tabpanel\">\n                            <Box p={3}>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel>Rankings Type</InputLabel>\n                                    <Select value={type} onChange={onChangeType}>\n                                        <MenuItem value={'leaderboard'}>Live</MenuItem>\n                                        <MenuItem value={'uniqueLeaderboard'}>Unique</MenuItem>\n                                        <MenuItem value={'historyLeaderboard'}>Total</MenuItem>\n                                    </Select>\n                                </FormControl>\n                                <Grid container direction=\"column\" justify=\"center\">\n                                    <Grid item xs={12}>\n                                        <Grid container direction=\"row\" justify=\"center\" alignContent=\"center\">\n                                            <Grid item xs={12} md={6}>\n                                                <RankingsTable\n                                                    data={game[tab].stats[type]}\n                                                    showDuration={type !== 'uniqueLeaderboard'}\n                                                    useLiveDuration={useLiveDuration}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6} className={classes.padTop}>\n                                                <Grid container direction=\"column\" justify=\"center\">\n                                                    <Grid item xs={12}>\n                                                        {type === 'uniqueLeaderboard' ? (\n                                                            <UniqueRecordsChart\n                                                                title=\"WRs\"\n                                                                labels={game[tab].stats[type]\n                                                                    .map((row) => row.user.name)\n                                                                    .slice(0, 20)}\n                                                                series={[\n                                                                    {\n                                                                        name: 'Unique WRs',\n                                                                        data: game[tab].stats[type]\n                                                                            .slice(0, 20)\n                                                                            .map((row) => row.wrs),\n                                                                    },\n                                                                ]}\n                                                            />\n                                                        ) : (\n                                                            <RecordsChart\n                                                                title=\"WRs\"\n                                                                labels={game[tab].stats[type].map(\n                                                                    (row) => row.user.name,\n                                                                )}\n                                                                series={game[tab].stats[type].map((row) => row.wrs)}\n                                                                rest={type === 'historyLeaderboard'}\n                                                            />\n                                                        )}\n                                                    </Grid>\n                                                    <Grid item xs={12} className={classes.padTop}></Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Typography>\n                    </>\n                )}\n            </Paper>\n            <FloatingActionButton />\n        </ViewContent>\n    );\n};\n\nexport default withRouter(RankingsView);\n","import React from 'react';\nimport Moment from 'react-moment';\nimport Avatar from '@material-ui/core/Avatar';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { stableSortSort } from '../utils/stableSort';\nimport { getDateDifferenceColor, formatScore } from '../utils/tools';\n\nconst rows = [\n    { id: 'map.alias', sortable: false, label: 'Map', align: 'left' },\n    { id: 'score', sortable: false, label: 'Time', align: 'left' },\n    { id: 'user.name', sortable: false, label: 'Player', align: 'left' },\n    { id: 'delta', sortable: false, label: 'Imporvement', align: 'left' },\n    { id: 'date', sortable: false, label: 'Date', align: 'left' },\n];\n\nconst LargestImprovementHead = ({ order, orderBy, onRequestSort }) => {\n    const createSortHandler = (prop1, prop2) => (event) => {\n        onRequestSort(event, prop1, prop2);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {rows.map((row) => (\n                    <TableCell\n                        key={row.id}\n                        align={row.align}\n                        padding=\"default\"\n                        sortDirection={orderBy === row.id ? order : false}\n                    >\n                        {row.sortable === true && (\n                            <Tooltip title={'Sort by ' + row.label} placement=\"bottom-start\" enterDelay={300}>\n                                <TableSortLabel\n                                    active={orderBy === row.id}\n                                    direction={order}\n                                    onClick={createSortHandler(row.id, row.id2)}\n                                >\n                                    {row.label}\n                                </TableSortLabel>\n                            </Tooltip>\n                        )}\n                        {row.sortable === false && row.label}\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        overflowX: 'auto',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginRight: 10,\n    },\n}));\n\nconst defaultState = {\n    order: 'desc',\n    orderBy: 'delta',\n    thenBy: 'date',\n    page: 0,\n    rowsPerPage: 50,\n};\n\nconst noWrap = { whiteSpace: 'nowrap' };\nconst minifiedStyle = { padding: '7px 0px 7px 16px' };\nconst MinTableCell = (props) => <TableCell style={minifiedStyle} {...props} />;\n\nconst RecordsTable = ({ data }) => {\n    const [{ order, orderBy, thenBy }, setState] = React.useState({ ...defaultState });\n\n    const handleRequestSort = (_, prop1, prop2) => {\n        const newOrderBy = prop1;\n        const newThenBy = prop2;\n\n        setState((state) => ({\n            ...state,\n            order: state.orderBy === newOrderBy && state.order === 'desc' ? 'asc' : 'desc',\n            orderBy: newOrderBy,\n            thenBy: newThenBy,\n        }));\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Table size=\"small\">\n                <LargestImprovementHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\n                <TableBody>\n                    {stableSortSort(data, order, orderBy, thenBy)\n                        .map((row) => (\n                            <TableRow tabIndex={-1} key={row.id}>\n                                <MinTableCell\n                                    style={noWrap}\n                                    rowSpan={orderBy === 'map.name' || orderBy === 'map.index' ? row.map.records : 1}\n                                    align=\"left\"\n                                >\n                                    <Link\n                                        color=\"inherit\"\n                                        href={`https://board.iverb.me/chamber/${row.map.id}`}\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {row.map.alias}\n                                    </Link>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">{formatScore(row.score)}</MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    <Grid container direction=\"row\" alignItems=\"center\">\n                                        <Avatar className={classes.avatar} src={row.user.avatar} />\n                                        <Link\n                                            style={noWrap}\n                                            color=\"inherit\"\n                                            href={'https://board.iverb.me/profile/' + row.user.id}\n                                            rel=\"noreferrer\"\n                                            target=\"_blank\"\n                                        >\n                                            {row.user.name}\n                                        </Link>\n                                    </Grid>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">\n                                            <span>-{formatScore(row.delta)}</span>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    <Tooltip\n                                        title={<Moment fromNow>{row.date}</Moment>}\n                                        placement=\"bottom-end\"\n                                        enterDelay={300}\n                                    >\n                                        <Moment\n                                            style={{ color: getDateDifferenceColor(row.date), ...noWrap }}\n                                            format=\"YYYY-MM-DD\"\n                                        >\n                                            {row.date}\n                                        </Moment>\n                                    </Tooltip>\n                                </MinTableCell>\n                            </TableRow>\n                        ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n};\n\nexport default RecordsTable;\n","import React from 'react';\nimport Moment from 'react-moment';\nimport Avatar from '@material-ui/core/Avatar';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { stableSortSort } from '../utils/stableSort';\nimport { getDateDifferenceColor, formatScore } from '../utils/tools';\n\nconst rows = [\n    { id: 'map.alias', sortable: false, label: 'Map', align: 'left' },\n    { id: 'score', sortable: false, label: 'Time', align: 'left' },\n    { id: 'user.name', sortable: false, label: 'Player', align: 'left' },\n    { id: 'duration', sortable: false, label: 'Duration', align: 'left' },\n    { id: 'date', sortable: false, label: 'Start', align: 'left' },\n    { id: 'beatenBy.date', sortable: false, label: 'Ended', align: 'left' },\n    { id: 'beatenBy.user.name', sortable: false, label: 'Beaten By', align: 'left' },\n];\n\nconst LongestLastingHead = ({ order, orderBy, onRequestSort }) => {\n    const createSortHandler = (prop1, prop2) => (event) => {\n        onRequestSort(event, prop1, prop2);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {rows.map((row) => (\n                    <TableCell\n                        key={row.id}\n                        align={row.align}\n                        padding=\"default\"\n                        sortDirection={orderBy === row.id ? order : false}\n                    >\n                        {row.sortable === true && (\n                            <Tooltip title={'Sort by ' + row.label} placement=\"bottom-start\" enterDelay={300}>\n                                <TableSortLabel\n                                    active={orderBy === row.id}\n                                    direction={order}\n                                    onClick={createSortHandler(row.id, row.id2)}\n                                >\n                                    {row.label}\n                                </TableSortLabel>\n                            </Tooltip>\n                        )}\n                        {row.sortable === false && row.label}\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        overflowX: 'auto',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginRight: 10,\n    },\n}));\n\nconst defaultState = {\n    order: 'desc',\n    orderBy: 'duration',\n    thenBy: 'date',\n    page: 0,\n    rowsPerPage: 50,\n};\n\nconst noWrap = { whiteSpace: 'nowrap' };\nconst minifiedStyle = { padding: '7px 0px 7px 16px' };\nconst MinTableCell = (props) => <TableCell style={minifiedStyle} {...props} />;\n\nconst RecordsTable = ({ data, useLiveDuration }) => {\n    const [{ order, orderBy, thenBy }, setState] = React.useState({ ...defaultState });\n\n    const handleRequestSort = (_, prop1, prop2) => {\n        const newOrderBy = prop1;\n        const newThenBy = prop2;\n\n        setState((state) => ({\n            ...state,\n            order: state.orderBy === newOrderBy && state.order === 'desc' ? 'asc' : 'desc',\n            orderBy: newOrderBy,\n            thenBy: newThenBy,\n        }));\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Table size=\"small\">\n                <LongestLastingHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\n                <TableBody>\n                    {stableSortSort(data, order, orderBy, thenBy)\n                        .map((row) => (\n                            <TableRow tabIndex={-1} key={row.id}>\n                                <MinTableCell\n                                    style={noWrap}\n                                    rowSpan={orderBy === 'map.name' || orderBy === 'map.index' ? row.map.records : 1}\n                                    align=\"left\"\n                                >\n                                    <Link\n                                        color=\"inherit\"\n                                        href={`https://board.iverb.me/chamber/${row.map.id}`}\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {row.map.alias}\n                                    </Link>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">{formatScore(row.score)}</MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    <Grid container direction=\"row\" alignItems=\"center\">\n                                        <Avatar className={classes.avatar} src={row.user.avatar} />\n                                        <Link\n                                            style={noWrap}\n                                            color=\"inherit\"\n                                            href={'https://board.iverb.me/profile/' + row.user.id}\n                                            rel=\"noreferrer\"\n                                            target=\"_blank\"\n                                        >\n                                            {row.user.name}\n                                        </Link>\n                                    </Grid>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    <Tooltip title=\"in days\" placement=\"bottom-end\" enterDelay={300}>\n                                        {useLiveDuration && row.beatenBy.id === null ? (\n                                            <Moment style={noWrap} diff={row.date} unit=\"days\"></Moment>\n                                        ) : (\n                                            <span>{row.duration}</span>\n                                        )}\n                                    </Tooltip>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    <Tooltip\n                                        title={<Moment fromNow>{row.date}</Moment>}\n                                        placement=\"bottom-end\"\n                                        enterDelay={300}\n                                    >\n                                        <Moment\n                                            style={{ color: getDateDifferenceColor(row.date), ...noWrap }}\n                                            format=\"YYYY-MM-DD\"\n                                        >\n                                            {row.date}\n                                        </Moment>\n                                    </Tooltip>\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    {row.beatenBy.id ? (\n                                        <Tooltip\n                                            title={<Moment fromNow>{row.beatenBy.date}</Moment>}\n                                            placement=\"bottom-end\"\n                                            enterDelay={300}\n                                        >\n                                            <Moment\n                                                style={{ color: getDateDifferenceColor(row.beatenBy.date), ...noWrap }}\n                                                format=\"YYYY-MM-DD\"\n                                            >\n                                                {row.beatenBy.date}\n                                            </Moment>\n                                        </Tooltip>\n                                    ) : (\n                                        <span>ongoing</span>\n                                    )}\n                                </MinTableCell>\n                                <MinTableCell align=\"left\">\n                                    {row.beatenBy.id ? (\n                                        <Grid container direction=\"row\" alignItems=\"center\">\n                                            <Avatar className={classes.avatar} src={row.beatenBy.user.avatar} />\n                                            <Link\n                                                style={noWrap}\n                                                color=\"inherit\"\n                                                href={'https://board.iverb.me/profile/' + row.beatenBy.user.id}\n                                                rel=\"noreferrer\"\n                                                target=\"_blank\"\n                                            >\n                                                {row.beatenBy.user.name}\n                                            </Link>\n                                        </Grid>\n                                    ) : (\n                                        <span>unbeaten</span>\n                                    )}\n                                </MinTableCell>\n                            </TableRow>\n                        ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n};\n\nexport default RecordsTable;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core';\nimport FloatingActionButton from '../components/FloatingActionButton';\nimport LargestImprovement from '../components/LargestImprovement';\nimport LongestLasting from '../components/LongestLasting';\nimport SimpleTitle from '../components/SimpleTitle';\nimport Api from '../Api';\nimport { useIsMounted } from '../Hooks';\nimport ViewContent from './ViewContent';\n\nconst useStyles = makeStyles((theme) => ({\n    padTop: {\n        paddingTop: '70px',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n}));\n\nconst StatsView = ({ match }) => {\n    const isMounted = useIsMounted();\n\n    const [game, setGame] = React.useState(undefined);\n    const [type, setType] = React.useState('longestLasting');\n\n    const onChangeType = React.useCallback(\n        (event) => {\n            setType(event.target.value);\n        },\n        [setType],\n    );\n\n    const page = match.params[0];\n    const date = match.params.date;\n    const useLiveDuration = date === undefined || date === 'latest';\n\n    React.useEffect(() => {\n        setGame(undefined);\n    }, [page]);\n\n    React.useEffect(() => {\n        Api.request('stats', date)\n            .then((game) => {\n                if (isMounted.current) {\n                    setGame(game);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n\n                if (isMounted.current) {\n                    setGame(null);\n                }\n            });\n    }, [isMounted, page, date, useLiveDuration]);\n\n    const StatsComponent = (() => {\n        switch (type) {\n            case 'longestLasting':\n                return LongestLasting;\n            case 'largestImprovement':\n                return LargestImprovement;\n            default:\n                return null;\n        }\n    })();\n\n    const classes = useStyles();\n\n    return (\n        <ViewContent>\n            <Paper>\n                {game === undefined ? (\n                    <LinearProgress />\n                ) : game === null ? (\n                    <SimpleTitle data=\"No data.\" />\n                ) : (\n                    <>\n                        <Typography component=\"div\" role=\"tabpanel\">\n                            <Box p={3}>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel>Stats Type</InputLabel>\n                                    <Select value={type} onChange={onChangeType}>\n                                        <MenuItem value={'longestLasting'}>Longest Lasting</MenuItem>\n                                        <MenuItem value={'largestImprovement'}>Largest Improvement</MenuItem>\n                                    </Select>\n                                </FormControl>\n                                <Grid container direction=\"column\" justify=\"center\">\n                                    <Grid item xs={12}>\n                                        <Grid container direction=\"row\" justify=\"center\" alignContent=\"center\">\n                                            <Grid item xs={12}>\n                                                <StatsComponent data={game[type]} useLiveDuration={useLiveDuration} />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Typography>\n                    </>\n                )}\n            </Paper>\n            <FloatingActionButton />\n        </ViewContent>\n    );\n};\n\nexport default withRouter(StatsView);\n","import BarChart from 'chart-race-react';\n\nclass RaceChart extends BarChart {\n    constructor(...props) {\n        super(...props);\n    }\n\n    update = () => {\n        // Added props.start check for manual pauses\n        if (this.state.idx + 1 === this.props.timeline.length || !this.props.start) {\n            return clearInterval(this.state.intervalId);\n        }\n\n        this.setState((prevState) => {\n            const [currRank, maxVal] = this.sortAxis(prevState.idx + 1);\n\n            return {\n                idx: prevState.idx + 1,\n                prevRank: prevState.currRank,\n                currRank: currRank,\n                maxVal: maxVal,\n            };\n        });\n    };\n\n    // https://github.com/bchao1/chart-race-react/issues/1\n    sortAxis = (i, descending, minValue = 1) => {\n        const byValue = descending || descending === undefined ? (a, b) => b.val - a.val : (a, b) => a.val - b.val;\n\n        const sorted = Object.keys(this.props.data)\n            .map((name) => {\n                return {\n                    name: name,\n                    val: this.props.data[name][i],\n                };\n            })\n            .slice(0, this.maxItems)\n            .sort(byValue)\n            .filter((item) => item.val >= minValue);\n\n        const maxVal = Math.max.apply(\n            Math,\n            sorted.map((item) => item.val),\n        );\n\n        return [\n            sorted.reduce(\n                (prev, cur, idx) => ({\n                    ...prev,\n                    [cur.name]: idx,\n                }),\n                {},\n            ),\n            maxVal,\n        ];\n    };\n}\n\nexport default RaceChart;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport moment from 'moment';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport FloatingActionButton from '../components/FloatingActionButton';\nimport SimpleTitle from '../components/SimpleTitle';\nimport BarChart from '../components/RaceChart';\nimport Api from '../Api';\nimport { useIsMounted } from '../Hooks';\nimport ViewContent from './ViewContent';\n\nconst randomColor = () => `rgb(${255 * Math.random()}, ${255 * Math.random()}, ${255 * Math.random()})`;\n\nconst RaceView = ({ match }) => {\n    const isMounted = useIsMounted();\n\n    const [race, setRace] = React.useState({\n        data: undefined,\n        labels: [],\n        colors: [],\n        len: 0,\n    });\n\n    const [run, setRun] = React.useState(true);\n\n    const page = match.params[0];\n    const date = match.params.date;\n    const useLiveDuration = date === undefined || date === 'latest';\n\n    React.useEffect(() => {\n        setRace({ data: undefined });\n    }, [page]);\n\n    React.useEffect(() => {\n        Api.request('race', date)\n            .then(({ data }) => {\n                if (isMounted.current) {\n                    const players = Object.keys(data);\n                    const len = data[players[0]].length;\n\n                    setRace({\n                        data,\n                        timeline: Array(len)\n                            .fill(0)\n                            .map((_, idx) => moment('2012-03-22').add(idx, 'days').format('YYYY-MM-DD')),\n                        labels: players.reduce((prev, cur) => {\n                            return {\n                                ...prev,\n                                [cur]: (\n                                    <div style={{ textAlign: 'right', paddingRight: '50px' }}>\n                                        <div>{cur}</div>\n                                    </div>\n                                ),\n                            };\n                        }, {}),\n                        colors: players.reduce(\n                            (prev, cur) => ({\n                                ...prev,\n                                [cur]: randomColor(),\n                            }),\n                            {},\n                        ),\n                        len,\n                    });\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n\n                if (isMounted.current) {\n                    setRace({ data: null});\n                }\n            });\n    }, [isMounted, page, date, useLiveDuration]);\n\n    return (\n        <ViewContent>\n            <Paper>\n                {race.data === undefined ? (\n                    <LinearProgress />\n                ) : race.data === null ? (\n                    <SimpleTitle data=\"No data.\" />\n                ) : (\n                    <>\n                        <Typography component=\"div\" role=\"tabpanel\">\n                            <div\n                                style={{\n                                    width: '100%',\n                                    height: '100%',\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                }}\n                                onClick={() => setRun((run) => !run)}\n                            >\n                                <BarChart\n                                    start={run}\n                                    timeout={50}\n                                    delay={1}\n                                    timelineStyle={{\n                                        textAlign: 'center',\n                                        fontSize: '50px',\n                                        color: 'rgb(148, 148, 148)',\n                                        marginBottom: '100px',\n                                    }}\n                                    textBoxStyle={{\n                                        textAlign: 'center',\n                                        color: 'rgb(133, 131, 131)',\n                                        fontSize: '30px',\n                                    }}\n                                    barStyle={{\n                                        height: '60px',\n                                        marginTop: '10px',\n                                        borderRadius: '10px',\n                                    }}\n                                    width={[20, 75, 30]}\n                                    {...race}\n                                />\n                            </div>\n                        </Typography>\n                    </>\n                )}\n            </Paper>\n            <FloatingActionButton />\n        </ViewContent>\n    );\n};\n\nexport default withRouter(RaceView);\n","import React from 'react';\nimport { Route, Switch, Redirect, HashRouter } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { blue, orange, red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from './components/AppBar';\nimport AboutView from './views/AboutView';\nimport DemoView from './views/DemoView';\nimport NotFoundView from './views/NotFoundView';\nimport AppState, { AppReducer } from './AppState';\nimport RecordsView from './views/RecordsView';\nimport RankingsView from './views/RankingsView';\nimport StatsView from './views/StatsView';\nimport RaceView from './views/RaceView';\n\nconst useStyles = makeStyles((theme) => ({\n    views: {\n        marginTop: theme.spacing(5),\n    },\n}));\n\nconst App = () => {\n    const [state, dispatch] = React.useReducer(...AppReducer);\n\n    const theme = React.useMemo(() => {\n        return createMuiTheme({\n            palette: {\n                primary: {\n                    light: blue[300],\n                    main: blue[500],\n                    dark: blue[700],\n                },\n                secondary: {\n                    light: orange[300],\n                    main: orange[500],\n                    dark: orange[700],\n                },\n                error: {\n                    main: red.A400,\n                },\n                type: state.darkMode.enabled ? 'dark' : 'light',\n            },\n        });\n    }, [state.darkMode.enabled]);\n\n    const classes = useStyles();\n    const context = React.useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <AppState.Provider value={context}>\n                <HashRouter basename={'/'}>\n                    <AppBar />\n                    <div className={classes.views}>\n                        <Switch>\n                            <Redirect exact from=\"/\" to=\"/records\" />\n                            <Route exact path=\"/records/:date?\" component={RecordsView} />\n                            <Route exact path=\"/ranks/:date?\" component={RankingsView} />\n                            <Route exact path=\"/stats/:date?\" component={StatsView} />\n                            <Route exact path=\"/race/:date?\" component={RaceView} />\n                            <Route exact path=\"/about\" component={AboutView} />\n                            <Route exact path=\"/demo\" component={DemoView} />\n                            <Route component={NotFoundView} />\n                        </Switch>\n                    </div>\n                </HashRouter>\n            </AppState.Provider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}